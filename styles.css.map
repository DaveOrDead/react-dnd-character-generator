{"version":3,"sources":["webpack:///webpack:///src/src/styles/_settings.scss","webpack:///webpack:///src/~/shell-csslib/src/_normalise-reset.scss","webpack:///webpack:///src/~/shell-csslib/src/_base.scss","webpack:///webpack:///src/~/shell-csslib/src/_settings.scss","webpack:///webpack:///src/~/shell-csslib/src/_mixins-functions.scss","webpack:///webpack:///src/~/shell-csslib/src/_container.scss","webpack:///webpack:///src/~/shell-csslib/src/_grid.scss","webpack:///webpack:///src/~/shell-csslib/src/_helpers.scss","webpack:///webpack:///src/src/components/button/_button.scss","webpack:///webpack:///src/src/components/card/_card.scss","webpack:///webpack:///src/src/components/container/_container.scss","webpack:///webpack:///src/src/components/footer/_footer.scss","webpack:///webpack:///src/src/components/formItem/_formItem.scss","webpack:///webpack:///src/src/components/header/_header.scss","webpack:///webpack:///src/src/components/inputLabel/_inputLabel.scss","webpack:///webpack:///src/src/components/panel/_panel.scss","webpack:///webpack:///src/src/components/popover/_popover.scss","webpack:///webpack:///src/src/components/meter/_meter.scss","webpack:///webpack:///src/src/components/radioInput/_radioInput.scss","webpack:///webpack:///src/src/components/searchInput/_searchInput.scss","webpack:///webpack:///src/src/components/selectList/_selectList.scss","webpack:///webpack:///src/src/components/statBox/_statBox.scss","webpack:///webpack:///src/src/components/subHeader/_subHeader.scss","webpack:///webpack:///src/src/components/table/_table.scss","webpack:///webpack:///src/src/components/textInput/_textInput.scss"],"names":[],"mappings":"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","file":"styles.css","sourcesContent":["/* ============================================================================\n   SETTINGS\n   ========================================================================= */\n\n/**\n * All global settings (Sass variables) and any Shell library setting\n * overrides.\n *\n * The project settings can use any of the Shell library settings, like so:\n *\n   $g-color-code-block-background: $shell-g-color-white;\n *\n * ---------------------------------------------------------------------------\n *\n * All settings start with a global namespace: `$g` followed by one hyphen,\n * like this:\n *\n   $g-;\n *\n * The \"g\" stands for \"global\".\n *\n * ----------------------------------------------------------------------------\n *\n * CONTENTS:\n *\n * 1. Colours\n * 2. Cosmetics\n * 3. Transitions and Animations\n * 4. Shell overrides\n */\n\n\n\n\n/* 1. Colours\n   ========================================================================= */\n\n/**\n * These colours will eventually end up in the CMDS, until then they should be\n * packaged up into an NPM module so we can easily share them across\n * Microservices.\n */\n\n\n/**\n * The number colour scale works like the standard typography numbering\n * system, lower numbers represent lighter shades of the colour, with the\n * higher numbers representing the darker shades. Here's the scale:\n *\n *  50 - The lightiest of lights\n * 100 – Ultra-light.\n * 200 – Extra-light.\n * 300 – Semi-light.\n * 400 – Light.\n * 500 – Normal.\n * 600 – Dark.\n * 700 – Semi-dark.\n * 800 – Extra-dark.\n * 900 – Ultra-dark.\n */\n\n\n/**\n * Grey.\n */\n\n$g-color-grey-50: #fafafb;\n\n$g-color-grey-100: #f5f6f8;\n\n$g-color-grey-200: #e9ebef;\n\n$g-color-grey-300: #d2d7df;\n\n$g-color-grey-400: #c7cdd6;\n\n$g-color-grey-500: #bcc3ce;\n\n$g-color-grey-600: #a5afbe;\n\n$g-color-grey-700: #8e9aad;\n\n$g-color-grey-800: #717a8a;\n\n$g-color-grey-900: #434d5d;\n\n/**\n * Green.\n */\n\n$g-color-green-50: #f3fbf7;\n\n$g-color-green-100: #bae8cf;\n\n$g-color-green-200: #98ddb8;\n\n$g-color-green-300: #76d1a1;\n\n$g-color-green-400: #23c576;\n\n$g-color-green-500: #1bb362;\n\n$g-color-green-600: #14a553;\n\n$g-color-green-700: #0e9843;\n\n$g-color-green-800: #088a35;\n\n$g-color-green-900: #016a19;\n\n/**\n * Legacy green.\n */\n\n$g-color-legacy-green-50: #f8fbf5;\n\n$g-color-legacy-green-100: #d9e8c7;\n\n$g-color-legacy-green-200: #c7ddac;\n\n$g-color-legacy-green-300: #b3d18f;\n\n$g-color-legacy-green-400: #97c456;\n\n$g-color-legacy-green-500: #81b245;\n\n$g-color-legacy-green-600: #70a438;\n\n$g-color-legacy-green-700: #61962b;\n\n$g-color-legacy-green-800: #518a1f;\n\n$g-color-legacy-green-900: #30690b;\n\n/**\n * Blue.\n */\n\n$g-color-blue-50: #eef5ff;\n\n$g-color-blue-100: #cae1fc;\n\n$g-color-blue-200: #b0d2fb;\n\n$g-color-blue-300: #96c4fa;\n\n$g-color-blue-400: #63b1f9;\n\n$g-color-blue-500: #509cf6;\n\n$g-color-blue-600: #428cf4;\n\n$g-color-blue-700: #347df1;\n\n$g-color-blue-800: #266ef0;\n\n$g-color-blue-900: #104ce8;\n\n/**\n * Red.\n */\n\n$g-color-red-50: #fef7f6;\n\n$g-color-red-100: #f9cbc7;\n\n$g-color-red-200: #f5b1ab;\n\n$g-color-red-300: #f2988f;\n\n$g-color-red-400: #f26d5c;\n\n$g-color-red-500: #e85244;\n\n$g-color-red-600: #e24437;\n\n$g-color-red-700: #dd362a;\n\n$g-color-red-800: #d8281e;\n\n$g-color-red-900: #ad0201;\n\n\n/**\n * Brand: CM blue.\n */\n\n$g-color-brand: #19a9e5;\n\n\n/**\n * Form validation error.\n */\n\n$g-form-validation-error: $g-color-red-500;\n\n\n\n\n/* 2. Cosmetics\n   ========================================================================= */\n\n/**\n * Active `box-shadow`.\n */\n\n$g-box-shadow-active: inset 0 0 0 1px $g-color-brand,\n                      0 0 0 2px rgba($g-color-brand, 0.25);\n\n\n/**\n * Panel.\n */\n\n$g-box-shadow-panel-drop-shadow: 0 2px 0 rgba($g-color-grey-400, 0.3);\n\n// Default\n$g-box-shadow-panel: inset 0 0 0 1px $g-color-grey-300,\n                     $g-box-shadow-panel-drop-shadow;\n\n// Hover/Focus state\n$g-box-shadow-panel-hover: inset 0 0 0 1px $g-color-brand,\n                           $g-box-shadow-panel-drop-shadow;\n\n// Error state\n$g-box-shadow-panel-error: inset 0 0 0 1px $g-color-red-700,\n                           $g-box-shadow-panel-drop-shadow;\n\n\n/**\n * Text input `box-shadow`.\n */\n\n$g-box-shadow-text-input: inset 0 2px 0 0 rgba($g-color-grey-700, 0.1),\n                          inset 0 0 0 1px $g-color-grey-300,\n                          0 1px 0 0 #fff;\n\n\n/**\n * Select list `box-shadow`.\n */\n\n$g-box-shadow-select-list: inset 0 2px 0 0 #fff,\n                           0 0 0 1px $g-color-grey-300,\n                           0 2px 0 0 rgba($g-color-grey-700, 0.1);\n\n\n\n\n\n\n\n\n\n/* 4. Shell overrides\n   ========================================================================= */\n\n/**\n * Z-Index system (Global).\n */\n\n$shell-g-z-layers: (\n    'popover': 5,\n    'base': 1,\n    'underneath': -1\n);\n\na {\n    text-decoration: none !important;\n}\n\n/**\n * Base (Local).\n *\n * @todo To be extracted into a CMDS layout, see:\n * http://campmon.com/jira/browse/WBFE-84.\n */\n\n$shell-base-root-element-background-color: $g-color-grey-100;\n\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/styles/_settings.scss\n **/","/* ============================================================================\n   NORMALISE AND RESET\n   ========================================================================= */\n\n\n/**\n * Let's get all browsers rendering all elements more consistently and in line\n * with modern standards, and let's nuke certain user-agent styles so that\n * everything is on an even playing field.\n *\n * We can also be a bit opinionated about CM specific style treatments.\n *\n * N.B. we should be keeping an eye on the normalize.css repo especially the\n * Issues: https://github.com/necolas/normalize.css/issues/.\n *\n * @credit\n * https://necolas.github.io/normalize.css/\n *\n * ----------------------------------------------------------------------------\n *\n * CONTENTS:\n *\n * 1. Root element and global resets\n * 2. Block-level elements\n * 3. Inline elements\n * 4. Embedded, image, and multimedia, elements\n * 5. Form elements\n * 6. Interactions\n */\n\n\n\n\n/* 1. Root element and global resets\n   ========================================================================= */\n\n/**\n * 1. Reset the `box-sizing` property to the more friendly `border-box` value.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n */\n\nhtml {\n    box-sizing: border-box; // [1]\n    /* stylelint-disable property-no-vendor-prefix */\n    -ms-text-size-adjust: 100%; // [2]\n    -webkit-text-size-adjust: 100%; // [2]\n    /* stylelint-enable */\n}\n\n// [1]\n*,\n*::before,\n*::after {\n    box-sizing: inherit;\n}\n\n\n/**\n * Remove all margins, paddings, and borders.\n *\n * N.B. do not include the following elements:\n * - `<input>`\n * - `<button>`\n * - `<textarea>`\n *\n * The complete list of HTML5 elements:\n * https://developer.mozilla.org/en/docs/Web/Guide/HTML/HTML5/\n * HTML5_element_list\n */\n\na,\nabbr,\naddress,\narticle,\naside,\nb,\nblockquote,\nbody,\ncaption,\ncite,\ncode,\ndd,\ndel,\ndetails,\ndfn,\ndialog,\ndiv,\ndl,\ndt,\nem,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nheader,\nhtml,\ni,\niframe,\nimg,\nins,\nkbd,\nlabel,\nlegend,\nli,\nmain,\nmenu,\nnav,\nobject,\nol,\np,\npre,\nq,\ns,\nsamp,\nsection,\nsmall,\nspan,\nstrong,\nsub,\nsummary,\nsup,\ntable,\ntbody,\ntd,\ntfoot,\nth,\nthead,\ntime,\ntr,\nu,\nul,\nvar {\n    border: 0;\n    margin: 0;\n    padding: 0;\n}\n\n\n\n\n/* 2. Block-level elements\n   ========================================================================= */\n\n/**\n * Add the correct display in IE 9-.\n * 1. Add the correct display in Edge, IE, and Firefox.\n * 2. Add the correct display in IE.\n */\n\narticle,\naside,\ndetails, // [1]\nfigcaption,\nfigure,\nfooter,\nheader,\nmain, // [2]\nmenu,\nnav,\nsection,\nsummary { // [1]\n    display: block;\n}\n\n\n/**\n * Add the correct display in IE 10-.\n * 1. Add the correct display in IE.\n */\n\ntemplate, // [1]\n[hidden] {\n    display: none;\n}\n\n\n/**\n * Reset lists, this is in addition to removing `margin` and `padding` in\n * \"Root element and global resets\".\n */\n\nul,\nol {\n    list-style-type: none;\n}\n\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n    box-sizing: content-box; // [1]\n    height: 0; // [1]\n    overflow: visible; // [2]\n}\n\n\n\n\n/* 3. Inline elements\n   ========================================================================= */\n\n/**\n * Add the correct display in IE 9-.\n */\n\naudio,\ncanvas,\nprogress,\nvideo {\n    display: inline-block;\n}\n\n\n/**\n * 1. Remove the gray background on active links in IE 10.\n * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.\n */\n\na {\n    background-color: transparent; // [1]\n    -webkit-text-decoration-skip: objects; // [2]\n}\n\n\n/**\n * Remove the outline on focused links when they are also active or hovered\n * in all browsers.\n */\n\na:active,\na:hover {\n    outline-width: 0;\n}\n\n\n/**\n * 1. Remove the bottom border in Firefox 39-.\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n    border-bottom: none; // [1]\n    /* stylelint-disable declaration-block-no-duplicate-properties */\n    text-decoration: underline; // [2]\n    text-decoration: underline dotted; // [2]\n    /* stylelint-enable */\n}\n\n\n/**\n * Prevent the duplicate application of `bolder` by the next rule in Safari 6.\n */\n\nb,\nstrong {\n    font-weight: inherit;\n}\n\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\n/* stylelint-disable no-duplicate-selectors */\n\nb,\nstrong {\n    font-weight: bolder;\n}\n\n/* stylelint-enable */\n\n\n/**\n * Add the correct font style in Android 4.3-.\n */\n\ndfn {\n    font-style: italic;\n}\n\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\n\nsmall {\n    /* stylelint-disable property-unit-whitelist */\n\n    font-size: 100%;\n\n    /* stylelint-enable */\n}\n\n\n/**\n * Prevent `<sub>` and `<sup>` affecting line height in all browsers.\n */\n\nsub,\nsup {\n    /* stylelint-disable property-unit-whitelist */\n\n    font-size: 75%;\n\n    /* stylelint-enable */\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}\n\nsub {\n    bottom: -0.25em;\n}\n\nsup {\n    top: -0.5em;\n}\n\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\npre,\nsamp {\n    font-family: monospace, monospace; // [1]\n    font-size: 1em; // [2]\n}\n\n\n\n\n/* 4. Embedded, image and multimedia, elements\n   ========================================================================= */\n\n/**\n * Remove the gap between media elements and the bottom of their containers.\n * See: https://github.com/h5bp/html5-boilerplate/issues/440.\n */\n\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n    vertical-align: middle;\n}\n\n\n/**\n * Add the correct display in iOS 4-7.\n */\n\naudio:not([controls]) {\n    display: none;\n    height: 0;\n}\n\n\n/**\n * Hide the overflow in IE.\n */\n\nsvg:not(:root) {\n    overflow: hidden;\n}\n\n\n\n\n/* 5. Form elements\n   ========================================================================= */\n\n/**\n * N.B. known limitation: by default, Chrome and Safari on OS X allow very\n * limited styling of `<select>`s, unless a `border` property is set.\n */\n\n\n/**\n * 1. Change font properties to `inherit` in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\nselect,\ntextarea {\n    font: inherit; // [1]\n    margin: 0; // [2]\n}\n\n\n/**\n * Restore the font weight unset by the previous rule.\n */\n\noptgroup {\n    font-weight: bold;\n}\n\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { // [1]\n    overflow: visible;\n}\n\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { // [1]\n    text-transform: none;\n}\n\n\n/**\n * Reset all styles so we have a blank canvas.\n */\n\nbutton {\n    background: transparent;\n    border: 0;\n    padding: 0;\n}\n\n\n/**\n * 1. Prevent a WebKit bug where (2) destroys native `<audio>` and `<video>`\n *    controls in Android 4.\n * 2. Improve usability and consistency of cursor style between image-type\n *    `<input>` and others.\n * 3. Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\nhtml [type='button'], // [1]\n[type='reset'],\n[type='submit'] {\n    /* stylelint-disable property-no-vendor-prefix */\n    -webkit-appearance: button; // [3]\n    /* stylelint-enable */\n    cursor: pointer; // [2]\n}\n\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type='button']::-moz-focus-inner,\n[type='reset']::-moz-focus-inner,\n[type='submit']::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n}\n\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type='button']:-moz-focusring,\n[type='reset']:-moz-focusring,\n[type='submit']:-moz-focusring {\n    outline: 1px dotted ButtonText;\n}\n\n\n/**\n * Indicate that `<label>` will shift focus to the associated `<input>`\n * element.\n */\n\nlabel {\n    cursor: pointer;\n}\n\n\n/**\n * 1. Remove the default vertical scrollbar in IE.\n * 2. Disable `<textarea>`s from being resized horizontally.\n */\n\ntextarea {\n    overflow: auto; // [1]\n    resize: vertical; // [2]\n}\n\n\n/**\n * Chrome and Firefox set a `min-width: min-content;` on `<fieldset>`s, so we\n * reset that to ensure it behaves more like a standard block element, see:\n * http://stackoverflow.com/questions/17408815/\n * fieldset-resizes-wrong-appears-to-have-unremovable-min-width-min-content.\n */\n\nfieldset {\n    min-width: 0;\n}\n\n// Firefox only\n/* stylelint-disable function-url-quotes */\n\n@-moz-document url-prefix() {\n    fieldset {\n        display: table-cell;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the colour inheritance from `<fieldset>` elements in IE.\n */\n\nlegend {\n    color: inherit; // [2]\n    display: table; // [1]\n    max-width: 100%; // [1]\n    white-space: normal; // [1]\n}\n\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n    vertical-align: baseline;\n}\n\n\n/**\n * Apply the `not-allowed` cursor for disabled elements (`<button>`, `<input>`,\n * `<textarea>`, `<optgroup>`, `<option>` and `<fieldset>`) and disable pointer\n * events.\n */\n\n:disabled {\n    cursor: not-allowed;\n    pointer-events: none;\n}\n\n\n/**\n * 1. Add the correct box sizing in IE 10-.\n * 2. Remove the padding in IE 10-.\n */\n\n[type='checkbox'],\n[type='radio'] {\n    box-sizing: border-box; // [1]\n    padding: 0; // [2]\n}\n\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type='number']::-webkit-inner-spin-button,\n[type='number']::-webkit-outer-spin-button {\n    height: auto;\n}\n\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type='search'] {\n    /* stylelint-disable property-no-vendor-prefix */\n    -webkit-appearance: textfield; // [1]\n    /* stylelint-enable */\n    outline-offset: -2px; // [2]\n}\n\n\n/**\n * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.\n */\n\n[type='search']::-webkit-search-cancel-button,\n[type='search']::-webkit-search-decoration {\n    /* stylelint-disable property-no-vendor-prefix */\n\n    -webkit-appearance: none;\n\n    /* stylelint-enable */\n}\n\n\n/**\n * Correct the text style of placeholders in Chrome, Edge, and Safari.\n */\n\n/* stylelint-disable */\n\n::-webkit-input-placeholder {\n    color: inherit;\n    opacity: 0.54;\n}\n\n/* stylelint-enable */\n\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n/* stylelint-disable */\n\n::-webkit-file-upload-button {\n    -webkit-appearance: button; // [1]\n    font: inherit; // [2]\n}\n\n/* stylelint-enable */\n\n\n/**\n * Remove the clear field button (an \"X\" icon) and the reveal password button\n * (an \"eye\" icon) that is generated by IE 10+ for textual inputs. See:\n * http://stackoverflow.com/a/21869433/1116204\n */\n\n/* stylelint-disable */\n\n::-ms-clear,\n::-ms-reveal {\n    display: none;\n}\n\n/* stylelint-enable */\n\n\n/**\n * Unstyle the caret on `<select>`s in IE 10+.\n */\n\n/* stylelint-disable */\n\n::-ms-expand {\n    background-color: transparent;\n    border: 0;\n}\n\n/* stylelint-enable */\n\n\n/**\n * Rules for iOS devices.\n *\n * We isolate these rules behind an `.target-ios` class that is appended to the\n * `<html>` element via user-agent sniffing, for example:\n *\n    <html class=\"target-ios\">\n *\n * N.B. this functionality is not part of the Shell library, you will need to\n * add it yourself to the project Shell applies too.\n */\n\n.target-ios {\n    /**\n     * Fixes \"clickability\" issue (and more generally, the firing of events\n     * such as focus as well) for traditionally non-focusable elements with\n     * `[role=\"button\"]`, see:\n     * https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile\n     */\n\n    [role='button'] {\n        cursor: pointer;\n    }\n\n\n    /**\n     * Remove the top inner shadow from iOS inputs. See:\n     * https://davidwalsh.name/input-shadows-ipad\n     */\n\n    #{$shell-g-textual-inputs},\n    textarea {\n        /* stylelint-disable property-no-vendor-prefix */\n\n        -webkit-appearance: caret;\n\n        /* stylelint-enable */\n    }\n\n\n    /**\n     * Remove rounded corners that iOS applies to all `<input>` buttons.\n     */\n\n    [type='submit'],\n    [type='button'],\n    [type='image'],\n    [type='reset'] {\n        border-radius: 0;\n    }\n}\n\n\n\n\n/* 6. Interactions\n   ========================================================================= */\n\n/**\n * Suppress the focus outline on links that cannot be accessed via a keyboard.\n * This prevents an unwanted focus outline from appearing around elements that\n * might still respond to pointer events.\n *\n * N.B. it is okay to use `!important` here as we're doing it pre-emptively\n * i.e. you know you will always want the rule it's applied too to take\n * precedence.\n */\n\n[tabindex='-1']:focus {\n    outline: none !important;\n}\n\n\n/**\n * Avoid 300ms click delay on touch devices that support the `touch-action` CSS\n * property.\n *\n * In particular, unlike most other browsers, IE 11+Edge on Windows 10 on touch\n * devices and IE Mobile 10-11 DON'T remove the click delay when\n * `<meta name=\"viewport\" content=\"width=device-width\">` is present.\n * However, they DO support removing the click delay via\n * `touch-action: manipulation`.\n *\n * See:\n * - http://caniuse.com/#feat=css-touch-action\n * - http://patrickhlauke.github.io/touch/tests/results/#suppressing-300ms-delay\n * - https://adactio.com/journal/10019\n */\n\n/* stylelint-disable no-descending-specificity */\n\na,\narea,\nbutton,\ninput,\nlabel,\nselect,\nsummary,\ntextarea,\n[tabindex]:not([tabindex='-1']) {\n    touch-action: manipulation;\n}\n\n/* stylelint-enable */\n\n\n/**\n * Remove `:focus` styles for `coarse` input mechanisms, and on the `:hover`\n * pseudo class.\n */\n\n@media (pointer: coarse) and (hover: none) {\n    :focus {\n        outline: none;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/~/shell-csslib/src/_normalise-reset.scss\n **/","/* ============================================================================\n   BASE\n   ========================================================================= */\n\n\n/**\n * Here we provide very basic styling that most UI's will need. These styles\n * are applied at the most global level being applied via element selectors,\n * except for \"Headings\" which are scoped to classes (see that section for the\n * info).\n *\n * Everything in Base needs to be easily overridden which is really easy to do\n * as everything in Base sits right at the bottom in terms of specificity.\n *\n * ----------------------------------------------------------------------------\n *\n * CONTENTS:\n *\n * 1. Root element\n * 2. Links\n * 3. Images\n * 4. Forms\n * 5. Paragraphs\n * 6. Headings\n * 7. Print\n */\n\n\n\n\n/* 1. Root element\n   ========================================================================= */\n\nhtml {\n    background: $shell-base-root-element-background-color;\n    color: $shell-g-color-text;\n    font-family: $shell-g-font-family;\n    font-size: $shell-g-font-size / 16 * 1em;\n    font-weight: $shell-g-font-weight-normal;\n    line-height: $shell-g-line-height;\n}\n\n\n\n\n/* 2. Links\n   ========================================================================= */\n\na {\n    color: $shell-g-color-link;\n    text-decoration: $shell-base-link-text-decoration;\n\n    &:hover,\n    &:focus {\n        color: $shell-g-color-link-hover;\n        text-decoration: $shell-base-link-text-decoration-on-hover;\n    }\n}\n\n\n\n\n/* 3. Images\n   ========================================================================= */\n\n/**\n * 1. `[alt]` text is visually offset if images don't load.\n * 2. Make responsive, i.e. keep images from scaling beyond the width of their\n *    parents.\n */\n\nimg {\n    font-style: italic; // [1]\n    height: auto; // [2]\n    max-width: 100%; // [2]\n}\n\n\n/**\n * Third-party widgets—like Google Maps—cannot have their images be responsive\n * as this breaks any images used within them therefore we remove that by\n * applying the two possible Google Map container selectors plus a generic\n * container selector to be used for other third-party widgets.\n *\n * N.B. it is okay to use `!important` here as we're doing it pre-emptively\n * i.e. you know you will always want the rule it's applied to to take\n * precedence.\n *\n * @todo https://github.com/campaignmonitor/shell/issues/71\n */\n\n/* stylelint-disable selector-no-id, selector-max-specificity */\n\n.remove-responsive-images img,\n.map_canvas img,\n#map_canvas img {\n    max-width: none !important;\n}\n\n/* stylelint-enable */\n\n\n\n\n/* 4. Forms\n   ========================================================================= */\n\n/**\n * Apply an optional `opacity` style for disabled and read-only states.\n *\n * N.B. if developing for iOS be aware of this bug:\n * \"Safari Mobile for iOS applies a default style of `opacity: 0.4` to disabled\n * textual `<input>` elements. Other major browsers don't currently share this\n * particular default style.\"\n * —https://developer.mozilla.org/en-US/docs/Web/HTML/Element/\n * Input#Browser_compatibility\n */\n\n@if $shell-base-apply-style-to-disabled-and-readonly-states {\n    :disabled,\n    [readonly] {\n        opacity: $shell-base-disabled-and-readonly-state-opacity-strength;\n    }\n}\n\n\n/**\n * Allows us to use `padding` alone to determine the height of certain form\n * elements.\n */\n\n#{$shell-g-textual-inputs},\nselect,\noption {\n    line-height: 1;\n}\n\n\n\n\n/* 5. Paragraphs\n   ========================================================================= */\n\n/**\n * Apply an optional bottom margin to all paragraphs.\n */\n\n@if $shell-base-apply-bottom-margin-to-paragraphs {\n    p:not(:last-child) {\n        margin-bottom: rem($shell-g-spacing);\n    }\n}\n\n\n\n\n/* 6. Headings\n   ========================================================================= */\n\n/**\n * Here we scope our Base Heading styles to classes instead of the `<hx>`\n * element selector so our styles are not tied to the semantics of the heading\n * element, i.e. if you want a `<h4>` to look like a `<h2>` you can easily do\n * this.\n */\n\n\n/**\n * Neutralise all the heading elements in favour of applying styles via the\n * `.heading-` class and its variants. We make all the heading elements use the\n * default typography styles and we may as well apply the default text colour.\n *\n * N.B. Resetting `margin` and `padding` are taken care of in\n * \"Normalise/Reset\".\n */\n\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    color: $shell-g-color-text;\n    font-size: rem($shell-g-font-size);\n    font-weight: $shell-g-font-weight-normal;\n    line-height: $shell-g-line-height;\n}\n\n.heading-headline {\n    font-size: rem($shell-g-font-size-x-large);\n    font-weight: $shell-g-font-weight-bold;\n}\n\n.heading-headline--large {\n    font-size: rem($shell-g-font-size-2x-large);\n}\n\n.heading-title {\n    font-size: rem($shell-g-font-size-large);\n}\n\n.heading-sub-title {\n    font-weight: $shell-g-font-weight-bold;\n}\n\n\n\n\n/* 7. Print\n   ========================================================================= */\n\n/**\n * N.B. it is okay to use `!important` here as we're doing it pre-emptively\n * i.e. you know you will always want the rule it's applied too to take\n * precedence.\n */\n\n@media print {\n    /**\n     * Apply print friendly styles to all the things.\n     */\n\n    *,\n    *::before,\n    *::after,\n    *::first-letter,\n    *::first-line {\n        background: transparent !important;\n        box-shadow: none !important;\n        color: $shell-g-color-black !important;\n        text-shadow: none !important;\n    }\n\n\n    /**\n     * Hide elements not really useful on a piece of paper.\n     */\n\n    nav,\n    video,\n    audio {\n        display: none !important;\n    }\n\n\n    /**\n     * Ensure all images are responsive.\n     */\n\n    img {\n        height: auto !important;\n        max-width: 100% !important;\n    }\n\n\n    /**\n     * Make links always stand out.\n     */\n\n    a,\n    a:visited {\n        border-bottom: 0 !important;\n        text-decoration: underline !important;\n    }\n\n\n    /**\n     * Show the `[href]` and `[title]` attribute values of links and\n     * abbreviations via their `::after` pseudo element.\n     */\n\n    a[href]::after {\n        content: ' (' attr(href) ')';\n    }\n\n    abbr[title]::after {\n        content: ' (' attr(title) ')';\n    }\n\n    // Don't show links that are fragment identifiers, or use the\n    // `javascript:` pseudo protocol\n    a[href^='javascript:']::after,\n    a[href^='#']::after {\n        content: '';\n    }\n\n\n    /**\n     * Make the header row repeated at the top of each printed page, see:\n     * http://css-discuss.incutio.com/wiki/Printing_Tables\n     */\n\n    thead {\n        display: table-header-group;\n    }\n\n\n    /**\n     * Set page breaks, orphans and widows.\n     */\n\n    // Page breaks\n    h2,\n    h3 {\n        page-break-after: avoid;\n    }\n\n    tr,\n    img,\n    pre,\n    blockquote {\n        page-break-inside: avoid;\n    }\n\n    // Orphans and widows\n    p,\n    h2,\n    h3 {\n        orphans: 3;\n        widows: 3;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/~/shell-csslib/src/_base.scss\n **/","/* ============================================================================\n   SETTINGS\n   ========================================================================= */\n\n\n/**\n * All of Shell's settings (Sass variables).\n *\n * The settings are broken into two categories:\n *\n * - \"Global\".....settings for the entire library.\n * - \"Local\"......settings for a particular partial.\n *\n * ----------------------------------------------------------------------------\n *\n * All settings start with a global namespace: `$shell` followed by one\n * hyphen, like this:\n *\n   $shell-\n *\n * \"Global\" settings include a letter \"g\" to easily identify them, like so:\n *\n   $shell-g-\n *\n * \"Local\" settings include the name of its section to easily identify them, so\n * settings for the \"Base\" and \"Grid\" sections would be formatted like this:\n *\n   $shell-base-\n   $shell-grid-\n *\n * The `$shell` namespace prevents your project settings and Shell's settings\n * from clashing with each other, and allows you to easily see what is\n * coming from Shell and what isn't.\n *\n * ----------------------------------------------------------------------------\n *\n * CONTENTS:\n *\n * 1.  Base number (Global)\n * 2.  Colours (Global)\n * 3.  Typography (Global)\n * 4.  Spacing (Global)\n * 5.  Cosmetics (Global)\n * 6.  Breakpoints (Global)\n * 7.  Z-Index system (Global)\n * 8.  HiDPI units (Global)\n * 9.  HTML textual `input`s (Global)\n * 10. Base (Local)\n * 11. Container (Local)\n * 12. Grid (Local)\n * 13. Helpers (Local)\n */\n\n\n\n\n/* 1. Base number (Global)\n   ========================================================================= */\n\n/**\n * The baseline number from which everything else is derived.\n */\n\n$shell-g-base-number: 16 !default;\n\n\n\n\n/* 2. Colours (Global)\n   ========================================================================= */\n\n/**\n * Black and white.\n */\n\n$shell-g-color-white: #fff !default;\n\n$shell-g-color-black: #000 !default;\n\n\n/**\n * Base text.\n */\n\n$shell-g-color-text: #434d5d !default;\n\n\n/**\n * Links.\n */\n\n$shell-g-color-link: #19a9e5 !default;\n\n$shell-g-color-link-hover: $shell-g-color-link !default;\n\n\n\n\n/* 3. Typography (Global)\n   ========================================================================= */\n\n/**\n * The scale based on `$shell-g-base-number` being 16:\n *\n * Decrease: 14, 13, 12\n * Increase: 18, 24, 28, 32, 40, 48, 56, 72\n */\n\n$shell-g-font-size: $shell-g-base-number !default;\n\n// Decrease\n$shell-g-font-size-small: $shell-g-font-size - 2 !default;\n\n$shell-g-font-size-x-small: $shell-g-font-size - 3 !default;\n\n$shell-g-font-size-2x-small: $shell-g-font-size - 4 !default;\n\n// Increase\n$shell-g-font-size-large: $shell-g-font-size + 2 !default;\n\n$shell-g-font-size-x-large: ceil($shell-g-font-size / 2 * 3) !default;\n\n$shell-g-font-size-2x-large: ceil($shell-g-font-size / 2 * 3.5) !default;\n\n$shell-g-font-size-3x-large: ceil($shell-g-font-size / 2 * 4) !default;\n\n$shell-g-font-size-4x-large: ceil($shell-g-font-size / 2 * 5) !default;\n\n$shell-g-font-size-5x-large: ceil($shell-g-font-size / 2 * 6) !default;\n\n$shell-g-font-size-6x-large: ceil($shell-g-font-size / 2 * 7) !default;\n\n$shell-g-font-size-7x-large: ceil($shell-g-font-size / 2 * 9) !default;\n\n\n/**\n * Line height.\n */\n\n$shell-g-line-height: 1.5 !default;\n\n\n/**\n * Families.\n */\n\n// Base\n$shell-g-font-family: 'Helvetica Neue', sans-serif !default;\n\n// Mono-space\n$shell-g-font-family-monospace: monospace, monospace !default;\n\n\n/**\n * Weights.\n */\n\n$shell-g-font-weight-normal: 400 !default;\n\n$shell-g-font-weight-light: 300 !default;\n\n$shell-g-font-weight-bold: 700 !default;\n\n\n\n\n/* 4. Spacing (Global)\n   ========================================================================= */\n\n/**\n * The scale based on `$shell-g-base-number` being 16:\n *\n * Decrease: 12, 8, 4\n * Increase: 24, 32, 40, 48, 56, 72, 96\n */\n\n$shell-g-spacing: $shell-g-base-number !default;\n\n// Decrease\n$shell-g-spacing-small: floor($shell-g-spacing - 4) !default;\n\n$shell-g-spacing-x-small: floor($shell-g-spacing / 2) !default;\n\n$shell-g-spacing-2x-small: floor($shell-g-spacing / 4) !default;\n\n// Increase\n$shell-g-spacing-large: ceil($shell-g-spacing / 2 * 3) !default;\n\n$shell-g-spacing-x-large: ceil($shell-g-spacing / 2 * 4) !default;\n\n$shell-g-spacing-2x-large: ceil($shell-g-spacing / 2 * 5) !default;\n\n$shell-g-spacing-3x-large: ceil($shell-g-spacing / 2 * 6) !default;\n\n$shell-g-spacing-4x-large: ceil($shell-g-spacing / 2 * 7) !default;\n\n$shell-g-spacing-5x-large: ceil($shell-g-spacing / 2 * 9) !default;\n\n$shell-g-spacing-6x-large: ceil($shell-g-spacing / 2 * 12) !default;\n\n\n\n\n/* 5. Cosmetics (Global)\n   ========================================================================= */\n\n$shell-g-border-radius: 3px;\n\n\n\n\n/* 6. Breakpoints (Global)\n   ========================================================================= */\n\n/**\n * The breakdown of the breakpoints is based off this chart:\n * http://static.lukew.com/unified_device_design.png\n *\n * Here's the thinking:\n *\n * - Palm..........smart-phones and feature phones—anything that can fit into\n *                 the palm of a hand.\n * - Lap...........typically tablets, notebooks and laptops—anything that is\n *                 portable that doesn't include phones.\n * - Lap small.....smaller tablets/notebooks and e-readers e.g. Kindle.\n * - Lap large.....larger tablets and laptops.\n * - Desk..........desktop computers, TVs, etc.—anything that isn't portable.\n * - Desk large....larger desktop computer monitors, TVs, and who knows what\n *                 else?\n *\n * The breakpoints:\n *\n * - Palm: 0–640px\n * - Lap: 641px +\n * - Lap small: 768px +\n * - Lap large: 901px +\n * - Desk: 1200px +\n * - Desk large: 1366px +\n *\n * @credit\n * http://www.lukew.com/ff/entry.asp?1679\n */\n\n\n/**\n * All the breakpoints divided by the default user-agent font-size setting\n * that is non-overridable by Shell's base font size setting:\n * `$shell-g-font-size`. We do this division as all viewport width and height\n * media queries are to be applied with the `em` unit. See:\n * http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/.\n *\n * N.B. if you wish to override any of the breakpoints then don't forget to\n * apply this calculation:\n *\n    ([breakpoint-value] / 16) * 1em\n *\n * N.B. as we're using a Sass map we need to use a Sass function to make it\n * easier to apply the map keys, the function lives in\n * \"Mixins/Functions -> Retrieve from maps\".\n */\n\n$shell-g-breakpoints: (\n\n  // Palm\n  'palm': (640 / 16) * 1em,\n\n  // Lap\n  'lap': (641 / 16) * 1em,\n  'lap-small': (768 / 16) * 1em,\n  'lap-large': (901 / 16) * 1em,\n\n  // Desk\n  'desk': (1200 / 16) * 1em,\n  'desk-large': (1366 / 16) * 1em\n\n) !default;\n\n\n/**\n * The setting used for the default breakpoint applied to the\n * \"Mixins/Functions -> Apply at breakpoints\" mixin.\n */\n\n$shell-g-global-breakpoints: (lap) !default;\n\n\n\n\n/* 7. Z-Index system (Global)\n   ========================================================================= */\n\n/**\n * A nice system that uses Sass maps to keep your project `z-index`s\n * maintainable, sane, and free of those crazy `z-index: 99999;` occurrences!\n *\n * Be sure to read this to fully understand how the system works:\n * http://www.sitepoint.com/better-solution-managing-z-index-sass/\n *\n * Shell kicks it off by providing a standard stacking order that most projects\n * would require, you can then update the Sass map in your project \"Settings\"\n * partial, be sure to use nested maps to make this system aware of stacking\n * contexts as having a flat map will soon become a headache to maintain.\n *\n * Applying `z-index`s with this system is done like this:\n *\n    .c-header {\n        z-index: z(header);\n    }\n *\n * And for nested stacking contexts (defined via a nested map):\n *\n    .c-dialog__close-button {\n        z-index: z(dialog-elements, close-button);\n    }\n *\n * N.B. as we're using a Sass map (and nested maps) we need to use a Sass\n * function to make it easier to apply the map keys and to be able to\n * retrieve nested map keys. The function lives in\n * \"Mixins/Functions -> Retrieve from maps\".\n *\n * @credit\n * http://www.sitepoint.com/better-solution-managing-z-index-sass/\n */\n\n\n/**\n * Starting from highest to lowest:\n *\n    <body>\n        <dialog>\n            <dialog-close-button>\n        <dialog-underlay>\n        <header>\n        <main>\n        <footer>\n    </body>\n */\n\n$shell-g-z-layers: (\n    'dialog-elements': (\n        'close-button': 1\n    ),\n    'dialog': 5,\n    'dialog-underlay': 4,\n    'header': 3,\n    'main': 2,\n    'footer': 1,\n    'underneath': -1\n) !default;\n\n\n\n\n/* 8. HiDPI units (Global)\n   ========================================================================= */\n\n/**\n * HiDPI units, currently being used in:\n * \"Mixins/Functions -> HiDPI background images\".\n *\n * N.B. non-over-ridable.\n */\n\n$shell-g-hidpi-dpr: 1.3;\n\n$shell-g-hidpi-dpi: ($shell-g-hidpi-dpr * 96) * 1dpi;\n\n$shell-g-hidpi-dppx: 1.3 * 1dppx;\n\n\n\n\n/* 9. HTML textual `input`s (Global)\n   ========================================================================= */\n\n/* stylelint-disable string-no-newline */\n\n$shell-g-textual-inputs: 'input[type=\"text\"],\n                          input[type=\"search\"],\n                          input[type=\"tel\"],\n                          input[type=\"url\"],\n                          input[type=\"email\"],\n                          input[type=\"password\"],\n                          input[type=\"month\"],\n                          input[type=\"week\"],\n                          input[type=\"time\"],\n                          input[type=\"date\"],\n                          input[type=\"datetime\"],\n                          input[type=\"datetime-local\"],\n                          input[type=\"number\"]' !default;\n\n/* stylelint-enable */\n\n\n\n/* 10. Base (Local)\n   ========================================================================= */\n\n/**\n * Booleans.\n */\n\n$shell-base-apply-style-to-disabled-and-readonly-states: true !default;\n\n$shell-base-apply-bottom-margin-to-paragraphs: false !default;\n\n\n/**\n * Root element.\n */\n\n$shell-base-root-element-background-color: $shell-g-color-white !default;\n\n\n/**\n * Links.\n */\n\n$shell-base-link-text-decoration: underline !default;\n\n$shell-base-link-text-decoration-on-hover: none !default;\n\n\n/**\n * Forms.\n */\n\n$shell-base-disabled-and-readonly-state-opacity-strength: 0.6 !default;\n\n$shell-base-target-ios-selector: '.target-ios' !default;\n\n\n\n\n/* 11. Container (Local)\n   ========================================================================= */\n\n/**\n * Booleans.\n */\n\n$shell-container-apply-center-alignment: true !default;\n\n\n/**\n * Widths.\n */\n\n$shell-container-maximum-width: 1600 !default;\n\n$shell-container-minimum-width: 320 !default;\n\n// Size modifiers\n$shell-container-maximum-width-x-large: 2400 !default;\n\n$shell-container-maximum-width-large: 2000 !default;\n\n$shell-container-maximum-width-small: 1000 !default;\n\n$shell-container-maximum-width-x-small: 746 !default;\n\n\n/**\n * Gutter size.\n */\n\n$shell-container-gutter: $shell-g-spacing-3x-large !default;\n\n\n\n\n/* 12. Grid (Local)\n   ========================================================================= */\n\n/**\n * Grid column widths.\n */\n\n$shell-grid-1-col-width: calc(100% / 12) !default;\n\n$shell-grid-2-col-width: calc((100% / 12) * 2) !default;\n\n$shell-grid-3-col-width: 25% !default;\n\n$shell-grid-4-col-width: calc((100% / 12) * 4) !default;\n\n$shell-grid-5-col-width: calc((100% / 12) * 5) !default;\n\n$shell-grid-6-col-width: 50% !default;\n\n$shell-grid-7-col-width: calc((100% / 12) * 7) !default;\n\n$shell-grid-8-col-width: calc((100% / 12) * 8) !default;\n\n$shell-grid-9-col-width: 75% !default;\n\n$shell-grid-10-col-width: calc((100% / 12) * 10) !default;\n\n$shell-grid-11-col-width: calc((100% / 12) * 11) !default;\n\n$shell-grid-12-col-width: 100% !default;\n\n\n/* stylelint-disable max-line-length */\n\n/**\n * For all grid item widths turn on the ability to apply breakpoints via\n * boolean settings then define the breakpoints, see: \"Mixins/Functions ->\n * Apply at breakpoints\" to understand how this works.\n */\n\n// 1 col\n$shell-grid-apply-1-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-1-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 2 col\n$shell-grid-apply-2-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-2-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 3 col\n$shell-grid-apply-3-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-3-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 4 col\n$shell-grid-apply-4-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-4-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 5 col\n$shell-grid-apply-5-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-5-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 6 col\n$shell-grid-apply-6-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-6-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 7 col\n$shell-grid-apply-7-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-7-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 8 col\n$shell-grid-apply-8-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-8-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 9 col\n$shell-grid-apply-9-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-9-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 10 col\n$shell-grid-apply-10-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-10-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 11 col\n$shell-grid-apply-11-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-11-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n// 12 col\n$shell-grid-apply-12-col-width-at-breakpoints: false !default;\n\n$shell-grid-define-12-col-width-breakpoints: $shell-g-global-breakpoints !default;\n\n/* stylelint-enable */\n\n\n\n\n/* 13. Helpers (Local)\n   ========================================================================= */\n\n/**\n * For certain \"Helpers\" turn on the ability to apply breakpoints via boolean\n * settings then define the breakpoints, see: \"Mixins/Functions ->\n * Apply at breakpoints\" to understand how this works.\n */\n\n/* stylelint-disable max-line-length */\n\n/**\n * Text sizes.\n */\n\n/**\n * Base.\n */\n\n$shell-helper-apply-text-size-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-breakpoints: $shell-g-global-breakpoints !default;\n\n/**\n * Decrease from base.\n */\n\n// Small\n$shell-helper-apply-text-size-small-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-small-breakpoints: $shell-g-global-breakpoints !default;\n\n// X-Small\n$shell-helper-apply-text-size-x-small-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-x-small-breakpoints: $shell-g-global-breakpoints !default;\n\n// 2X-Small\n$shell-helper-apply-text-size-2x-small-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-2x-small-breakpoints: $shell-g-global-breakpoints !default;\n\n\n/**\n * Increase from base.\n */\n\n// Large\n$shell-helper-apply-text-size-large-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// X-Large\n$shell-helper-apply-text-size-x-large-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 2X-Large\n$shell-helper-apply-text-size-2x-large-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-2x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 3X-Large\n$shell-helper-apply-text-size-3x-large-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-3x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 4X-Large\n$shell-helper-apply-text-size-4x-large-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-4x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 5X-Large\n$shell-helper-apply-text-size-5x-large-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-5x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 6X-Large\n$shell-helper-apply-text-size-6x-large-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-6x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 7X-Large\n$shell-helper-apply-text-size-7x-large-at-breakpoints: false !default;\n\n$shell-helper-define-text-size-7x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n/* stylelint-enable */\n\n\n/* stylelint-disable max-line-length */\n\n/**\n * Alignments.\n */\n\n// Center\n$shell-helper-apply-text-align-center-at-breakpoints: false !default;\n\n$shell-helper-define-text-align-center-breakpoints: $shell-g-global-breakpoints !default;\n\n// Left\n$shell-helper-apply-text-align-left-at-breakpoints: false !default;\n\n$shell-helper-define-text-align-left-breakpoints: $shell-g-global-breakpoints !default;\n\n// Right\n$shell-helper-apply-text-align-right-at-breakpoints: false !default;\n\n$shell-helper-define-text-align-right-breakpoints: $shell-g-global-breakpoints !default;\n\n/* stylelint-enable */\n\n\n/* stylelint-disable max-line-length */\n\n\n/**\n * Text truncate.\n */\n\n$shell-helper-apply-text-truncate-at-breakpoints: false !default;\n\n$shell-helper-define-text-truncate-breakpoints: $shell-g-global-breakpoints !default;\n\n/* stylelint-enable */\n\n\n/* stylelint-disable max-line-length */\n\n/**\n * Hide.\n */\n\n// Hide elements from both screen readers and the document flow\n$shell-helper-apply-hide-at-breakpoints: false !default;\n\n$shell-helper-define-hide-breakpoints: $shell-g-global-breakpoints !default;\n\n// Hide elements only visually but have it available for screen readers\n$shell-helper-apply-hide-visually-at-breakpoints: false !default;\n\n$shell-helper-define-hide-visually-breakpoints: $shell-g-global-breakpoints !default;\n\n/* stylelint-enable */\n\n\n/* stylelint-disable max-line-length */\n\n/**\n * Spacing.\n */\n\n$shell-helper-apply-spacing-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-breakpoints: $shell-g-global-breakpoints !default;\n\n/**\n * Decrease from base.\n */\n\n// Small\n$shell-helper-apply-spacing-small-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-small-breakpoints: $shell-g-global-breakpoints !default;\n\n// X-Small\n$shell-helper-apply-spacing-x-small-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-x-small-breakpoints: $shell-g-global-breakpoints !default;\n\n// 2X-Small\n$shell-helper-apply-spacing-2x-small-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-2x-small-breakpoints: $shell-g-global-breakpoints !default;\n\n\n/**\n * Increase from base.\n */\n\n// Large\n$shell-helper-apply-spacing-large-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// X-Large\n$shell-helper-apply-spacing-x-large-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 2X-Large\n$shell-helper-apply-spacing-2x-large-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-2x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 3X-Large\n$shell-helper-apply-spacing-3x-large-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-3x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 4X-Large\n$shell-helper-apply-spacing-4x-large-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-4x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 5X-Large\n$shell-helper-apply-spacing-5x-large-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-5x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n// 6X-Large\n$shell-helper-apply-spacing-6x-large-at-breakpoints: false !default;\n\n$shell-helper-define-spacing-6x-large-breakpoints: $shell-g-global-breakpoints !default;\n\n/* stylelint-enable */\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/~/shell-csslib/src/_settings.scss\n **/","/* ============================================================================\n   MIXINS AND FUNCTIONS\n   ========================================================================= */\n\n\n/**\n * All of Shell's mixins and functions.\n *\n * N.B. all mixins and functions to be written in SassDoc documentation system,\n * see: http://sassdoc.com/.\n *\n * ----------------------------------------------------------------------------\n *\n * CONTENTS:\n *\n * 1. Private mixins and functions\n * 2. HiDPI background images (Mixin)\n * 3. Convert pixels to `rem`s or `em`s (Function)\n * 4. Apply at breakpoints (Mixin)\n * 5. Retrieve from maps (Function)\n * 6. Helpers (Mixin)\n */\n\n\n\n\n/* 1. Private mixins and functions\n   ========================================================================= */\n\n/**\n * Shell-only mixins and functions, not for Shell consumers although some can\n * be used if the need arises.\n */\n\n\n/// Remove a unit from a number.\n///\n/// @author Chris Pearce\n///\n/// @access private\n///\n/// @param {Number [unit]} $number — Number to remove unit from\n///\n/// @returns {Number}\n///\n/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420\n///\n/// @example scss - Usage\n///     strip-unit(24px)\n///     strip-unit(2.3em)\n\n@function strip-unit($number) {\n    @if type-of($number) == 'number' and not unitless($number) {\n        @return $number / ($number * 0 + 1);\n    }\n    @return $number;\n}\n\n\n\n\n/* 2. HiDPI background images (Mixin)\n   ========================================================================= */\n\n/// Easily apply HiDPI background images. We use a device pixel ratio (\"dpr\")\n/// of \"1.3\" which captures almost all HiDPI aware devices, see:\n/// https://gist.github.com/marcedwards/3446599.\n///\n/// N.B. Autoprefixer will take care of generating the non-standard\n/// `-webkit-device-pixel-ratio` for browsers/devices that need it, see:\n/// http://caniuse.com/#feat=css-media-resolution.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {String} $img-url — The image url path\n/// @param {Number [unit]} $img-width [auto] — The image width in `px`\n/// @param {Number [unit]} $img-height [auto] — The image height in `px`\n///\n/// @example scss - Usage\n///     .element-1 {\n///         @include hidpi-bg-img(\"path/to/image/image.png\", 100px, 45px);\n///     }\n///     .element-2 {\n///         @include hidpi-bg-img(\"path/to/image/image.png\", 32px);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         @media (min-resolution: 1.3dppx),\n///                (min-resolution: 124.8dpi) {\n///             background-image: url(\"path/to/image/image.png\");\n///             background-size: 100px 45px;\n///         }\n///     }\n///     .element-2 {\n///         @media (min-resolution: 1.3dppx),\n///                (min-resolution: 124.8dpi) {\n///             background-image: url(\"path/to/image/image.png\");\n///             background-size: 32px 32px;\n///         }\n///     }\n\n@mixin hidpi-bg-img($img-url, $img-width: auto, $img-height: auto) {\n    /* stylelint-disable */\n    @media (min-resolution: $shell-g-hidpi-dppx),\n           (min-resolution: $shell-g-hidpi-dpi) {\n    /* stylelint-enable */\n        background-image: url('#{$img-url}');\n        background-size: $img-width $img-height;\n    }\n}\n\n\n\n\n/* 3. Convert pixels to `rem`s or `em`s (Function)\n   ========================================================================= */\n\n/// Convert pixels to `em`s.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Number [unitless]} $value — The pixel value to be converted\n/// @param {Number [unitless]} $context [$shell-g-font-size] — The pixel\n/// value of the context\n///\n/// @requires strip-unit()\n///\n/// @returns {Number [unit]} - Calculated `em` value e.g. `1.45em`\n///\n/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420\n///\n/// @example scss - Usage\n///     .element-1 {\n///         margin-left: em(20, 18);\n///     }\n///     .element-2 {\n///         margin-left: em(20);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         margin-left: 1.111em;\n///     }\n///     .element-2 {\n///         margin-left: 1.25em;\n///     }\n\n@function em($value, $context: $shell-g-font-size) {\n    @if type-of($value) != 'number' or type-of($context) != 'number' {\n        @error 'You have to enter only numbers for `$value` and `$context`.';\n    }\n    @return strip-unit($value) / strip-unit($context) * 1em;\n}\n\n\n/// Convert pixels to `rem`s.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Number [unitless]} $value — The pixel value to be converted\n///\n/// @requires strip-unit()\n///\n/// @returns {Number [unit]} - Calculated `rem` value e.g. `1.45rem`\n///\n/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420\n///\n/// @example scss - Usage\n///     .element {\n///         margin-left: rem(20);\n///     }\n/// @example css - CSS Output\n///     .element {\n///         margin-left: 1.25rem;\n///     }\n\n@function rem($value) {\n    @if type-of($value) != 'number' {\n        /* stylelint-disable max-line-length */\n\n        @error 'You have to enter only a number for `$value`. You entered #{$value}`.';\n\n        /* stylelint-enable */\n    }\n    @return strip-unit($value) / strip-unit($shell-g-font-size) * 1rem;\n}\n\n\n\n\n/* 4. Apply at breakpoints\n   ========================================================================= */\n\n/**\n * This mixin makes it really easy for a Shell consumer to apply certain parts\n * of Shell at any width based breakpoint(s).\n *\n * N.B. the mixin does not support height based breakpoints or breakpoint\n * ranges.\n *\n * The mixin can also be used outside of Shell in project styles but its main\n * purpose is to allow Shell consumers to easily apply certain parts of Shell\n * at any breakpoint(s), mainly the \"Grid\".\n *\n * The mixin will accept any of the named breakpoints set in \"Settings ->\n * Breakpoints\" (which can be renamed and breakpoints redefined in your\n * project) or any number (the pixel amount of the viewport). The breakpoints\n * get converted to the `em` unit which is best practice in Responsive Web\n * Design. You can also specify if you want a minimum or maximum width media\n * query by passing in the \"min\" or \"max\" labels after you define your\n * breakpoint, the default is minimum width media queries to favour the\n * \"Mobile-first\" approach.\n *\n * Using this mixin requires you to \"opt in\" as Shell doesn't want to assume\n * all of its consumers are building responsive UI's requiring the CSS this\n * mixin generates. Opting in requires changing the relevant Boolean settings\n * found in: \"Settings\". For example if you wanted the \"Hide Visually\" Helper\n * to use this mixin you change its Boolean setting:\n * `$shell-helper-hide-visually-apply-at-breakpoints` to `true` then define\n * the breakpoints you need via its other setting:\n * `$shell-helper-hide-visually-define-breakpoints`. So in the \"Shell\n * Overrides\" section of your project \"Settings\" you will have something like\n * this, depending on what breakpoints you choose:\n *\n   $shell-helper-hide-visually-apply-at-breakpoints: true;\n   $shell-helper-hide-visually-define-breakpoints: (400 max, lap, desk);\n *\n * You define your breakpoints in a comma separated list enclosed in curly\n * brackets with the \"min\" or \"max\" labels always coming *after* the\n * breakpoint. If you want ALL of the named breakpoints defined here:\n * \"Settings -> Breakpoints\" then you can simply pass in the word \"all\", like\n * so:\n *\n   $shell-helper-hide-visually-define-breakpoints: (all);\n *\n * Right now the mixin only allows \"all\" by itself i.e. you cannot add numbers\n * (non-named breakpoints), so doing this will not work:\n *\n   $shell-helper-hide-visually-define-breakpoints: (all, 900);\n *\n * Shell has a global breakpoint setting set in \"Settings -> Breakpoints\" so\n * that you can easily share breakpoints across everything that uses the\n * mixin. By default Shell doesn't apply any breakpoints to this setting, this\n * is for the Shell consumer to apply if they need the ability for shared\n * global breakpoints. So in the \"Shell Overrides\" section of your project\n * \"Settings\" you could do this:\n *\n   $shell-g-global-breakpoints: (lap, desk);\n */\n\n/// Outputs minimum and maximum width media-queries for some of Shell's\n/// \"Helpers\" and all of Shell's \"Grid column widths\" at breakpoints defined\n/// by the consumers of Shell.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {String} $class-selector - Class selector used to generate the\n/// final class e.g. `.h-hide-visually` -> `.h-hide-visually-from-lap`.\n/// @param {List} $breakpoints - A list of breakpoints either named\n/// breakpoints e.g. `(palm, lap)`, integers e.g. `(400, 740)`, or \"all\" to\n/// generate all the named breakpoints e.g. `(all)`. Each breakpoint can be\n/// accompanied with a \"max\" or \"min\" limit label to tell the mixin to\n/// generate a `min-width` or `max-width` media query e.g.\n/// `(lap-large max, 460 max)`, the default is `min-width`.\n///\n/// @todo\n/// Allow number breakpoints to be passed in along with \"all\"\n/// Add @exception rules, see: https://gist.github.com/terkel/4373420\n///\n/// @example scss - Usage\n///     $shell-helper-hide-visually-define-breakpoints: (400 max, lap);\n///\n///     $shell-grid-col-4-define-breakpoints: (lap-large);\n/// @example css - CSS Output\n///     @media (max-width: 25em) {\n///         .h-hide-visually-up-to-400 {\n///             border: 0;\n///             clip: rect(0 0 0 0);\n///             height: 1px;\n///             margin: -1px ;\n///             overflow: hidden;\n///             padding: 0;\n///             position: absolute;\n///             width: 1px;\n///         }\n///     }\n///     @media (min-width: 40.0625em) {\n///         .h-hide-visually-from-lap {\n///             border: 0;\n///             clip: rect(0 0 0 0);\n///             height: 1px;\n///             margin: -1px ;\n///             overflow: hidden;\n///             padding: 0;\n///             position: absolute;\n///             width: 1px;\n///         }\n///     }\n///\n///     @media (min-width: 56.3125em) {\n///         .l-grid--col-2-from-lap-large {\n///             width: 16.6666%;\n///         }\n///     }\n\n@mixin apply-at-breakpoints($class-selector, $breakpoints: ()) {\n\n    // So we can pass in \"all\" which will generate all of the media queries\n    // using all of the named breakpoints from \"Settings -> Breakpoints\"\n    // N.B. you cannot pass in a limit when using this—the limit will use the\n    // default: `min-width` except for \"Palm\" which uses: `max-width`\n    $all-breakpoints: map-keys($shell-g-breakpoints);\n    @if $breakpoints == 'all' {\n        $breakpoints: $all-breakpoints;\n    }\n\n    // When defining a breakpoint with a limit: \"max\" or \"min\", it needs to\n    // be cast into a list of lists otherwise the mixin assumes there is a\n    // breakpoint called \"max\" or \"min\"\n    @if length($breakpoints) == 2 and index((min max), nth($breakpoints, 2)) {\n        $breakpoints-copy: $breakpoints;\n        $breakpoints: ();\n\n        /* stylelint-disable max-line-length */\n\n        $breakpoints: append($breakpoints, (nth($breakpoints-copy, 1) nth($breakpoints-copy, 2)));\n\n        /* stylelint-enable */\n    }\n\n    // Loop through all the breakpoints passed in from the Shell consumer side\n    @each $breakpoint in $breakpoints {\n\n        // The \"max\" or \"min\" limit used for the media feature part of the\n        // media query: `min-width` or `max-width`, default is always \"min\"\n        $limit-min: 'min';\n        $limit-max: 'max';\n        $limit: $limit-min;\n\n        // The \"max\" or \"min\" limit label that gets appended to the\n        // generated class selector\n        $limit-label: 'from';\n\n        // When defining a breakpoint with a limit—which is of type `list()`—\n        // we need to check this so we can separate the breakpoint and the\n        // limit parts, so they can be used in the relevant parts of the\n        // generated media query\n        @if type-of($breakpoint) == 'list' {\n            $limit: nth($breakpoint, 2);\n            $breakpoint: nth($breakpoint, 1);\n        }\n\n        // Palm is a special case as it needs to use a `max-width` media query\n        // as its viewport range is 0–640px\n        @if $breakpoint == 'palm' {\n            $limit: $limit-max;\n        }\n\n        // We have to check if the breakpoint is a number or a named\n        // breakpoint so that we can apply the relevant functions: `em()` and\n        // `bp()` so that we can generate the breakpoint value correctly\n        $generate-breakpoint: $breakpoint;\n\n        /* stylelint-disable block-closing-brace-newline-after */\n\n        @if type-of($breakpoint) == 'number' {\n            $breakpoint: strip-unit($breakpoint);\n            $generate-breakpoint: em($breakpoint, 16);\n        } @else {\n            $generate-breakpoint: bp($breakpoint);\n        }\n\n        /* stylelint-enable */\n\n        // Change the limit label when a \"max\" limit is used\n        @if $limit == $limit-max {\n            $limit-label: 'up-to';\n        }\n\n        // Construct the generated media query with the passed in limit and\n        // breakpoint\n        @media (#{$limit}-width: $generate-breakpoint) {\n            // The generated class selector split into 3 parts:\n            // [class-selector-passed-in]\n            // [limit-label(min/max)]\n            // [breakpoint(integer/named-breakpoint)]\n            // E.g.\n            // `.h-hide-visually-from-900`\n            // `.h-hide-visually-up-to-palm`\n\n            /* stylelint-disable max-line-length */\n\n            $generated-selector: '#{$class-selector}-#{$limit-label}-#{$breakpoint}';\n\n            /* stylelint-enable */\n\n            // The contents of the media query\n            #{$generated-selector} {\n                @content;\n            }\n        }\n    }\n}\n\n\n\n\n/* 5. Retrieve from maps\n   ========================================================================= */\n\n/**\n * An easier way to apply keys from the Shell maps defined in \"Settings\"\n * instead of using the native `map-get` function which can get tedious to\n * type again and again.\n *\n * For example, if you wanted to apply a key from the \"Z-Index system\" map\n * using the native `map-get` function you would have to do it like this:\n *\n    z-index: map-get($shell-g-z-layers, header);\n *\n * And when applying nested map keys, this:\n *\n    z-index: map-get(map-get($shell-g-z-layers, modal-elements), close-button);\n *\n * Instead we can apply it in a much nicer way:\n *\n    z-index: z(header);\n *\n * And for a nested map key:\n *\n    z-index: z(modal-elements, close-button);\n */\n\n\n/// An easier way to apply keys from the \"Breakpoints\" map.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {String} $breakpoint — The breakpoint name which is the map key\n/// name\n///\n/// @returns {Number [unit]} - The breakpoint converted to an `em` unit, the\n/// conversion happens in the \"Breakpoints\" map values\n///\n/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420\n///\n/// @example scss - Usage\n///     @media (max-width: bp(palm)) {\n///         background-color: crimson;\n///     }\n///     @media (min-width: bp(desk)) {\n///         background-color: crimson;\n///     }\n/// @example css - CSS Output\n///     @media (max-width: 40em) {\n///         background-color: crimson;\n///     }\n///     @media (min-width: 75em) {\n///         background-color: crimson;\n///     }\n\n@function bp($breakpoint) {\n    @if not map-has-key($shell-g-breakpoints, $breakpoint) {\n        /* stylelint-disable max-line-length */\n\n        @error 'Sorry but `#{$breakpoint}` doesn\\'t exist as a breakpoint name in the \\'Breakpoints\\' map.';\n\n        /* stylelint-enable */\n    }\n    @return map-get($shell-g-breakpoints, $breakpoint);\n}\n\n\n/// An easier way to apply keys from the \"Z-Index system\" map.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {String} $z-index-layer — The `z-index` layer name which is the map\n/// key name\n/// @param {String} $z-index-layer-nested [null] — The nested `z-index` layer\n/// name which is the nested map key name\n///\n/// @returns {Number [unitless]} - The `z-index` layer number\n///\n/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420\n///\n/// @example scss - Usage\n///     .element-1 {\n///         z-index: z(header);\n///     }\n///     .element-2 {\n///         z-index: z(modal-elements, close-button);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         z-index: 3;\n///     }\n///     .element-2 {\n///         z-index: 1;\n///     }\n\n/* stylelint-disable */\n@function z($z-index-layer, $z-index-layer-nested: null) {\n    @if not map-has-key($shell-g-z-layers, $z-index-layer) {\n        @error 'Sorry but `#{$z-index-layer}` doesn\\'t exist as a `z-index` name in the \\'Z-Index system\\' map.';\n    }\n    @if ($z-index-layer-nested != null) {\n        @return map-get(map-get($shell-g-z-layers, $z-index-layer), $z-index-layer-nested);\n    } @else {\n        @return map-get($shell-g-z-layers, $z-index-layer);\n    }\n}\n/* stylelint-enable */\n\n\n\n\n/* 6. Helpers\n   ========================================================================= */\n\n/**\n * Here are all the Helper mixins, see the Helpers intro comment block for\n * more information.\n */\n\n\n/// Makes an element expand to contain floated children.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the\n/// `!important` keyword\n///\n/// @example scss - Usage\n///     .element-1 {\n///         @include clear-fix();\n///     }\n///     .element-2 {\n///         @include clear-fix(true);\n///     }\n/// @example css - CSS Output\n///     .element-1::after {\n///         clear: both;\n///         content: \"\";\n///         display: table;\n///     }\n///     .element-2::after {\n///         clear: both !important;\n///         content: \"\" !important;\n///         display: table !important;\n///     }\n\n@mixin clear-fix($apply-important-keyword: false) {\n    $important-keyword: if($apply-important-keyword, ' !important', '');\n\n    &::after {\n        clear: both#{$important-keyword};\n        content: '#{$important-keyword}';\n        display: table#{$important-keyword};\n    }\n}\n\n\n/// Truncate some text using an ellipsis.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the\n/// `!important` keyword\n/// @param {String} $display [block] — Set the display property of the element\n///\n/// @example scss - Usage\n///     .element-1 {\n///         @include text-truncate(false, inline-block);\n///     }\n///     .element-2 {\n///         @include text-truncate(true);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         display: inline-block;\n///         overflow: hidden;\n///         text-overflow: ellipsis;\n///         white-space: nowrap;\n///     }\n///     .element-2 {\n///         display: block !important;\n///         overflow: hidden !important;\n///         text-overflow: ellipsis !important;\n///         white-space: nowrap !important;\n///     }\n\n@mixin text-truncate($apply-important-keyword: false, $display: block) {\n    $important-keyword: if($apply-important-keyword, ' !important', '');\n    $display-property-value: if($display == block, 'block', $display);\n    display: #{$display-property-value}#{$important-keyword};\n    overflow: hidden#{$important-keyword};\n    text-overflow: ellipsis#{$important-keyword};\n    white-space: nowrap#{$important-keyword};\n}\n\n\n/// Make text on OS X look more consistent with other systems that do not\n/// render text using sub-pixel anti-aliasing.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the\n/// `!important` keyword\n///\n/// @example scss - Usage\n///     .element-1 {\n///         @include text-osx-font-smoothing();\n///     }\n///     .element-2 {\n///         @include text-osx-font-smoothing(true);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         -moz-osx-font-smoothing: grayscale;\n///         -webkit-font-smoothing: antialiased;\n///     }\n///     .element-2 {\n///         -moz-osx-font-smoothing: grayscale !important;\n///         -webkit-font-smoothing: antialiased !important;\n///     }\n\n@mixin text-osx-font-smoothing($apply-important-keyword: false) {\n    $important-keyword: if($apply-important-keyword, ' !important', '');\n    -moz-osx-font-smoothing: grayscale#{$important-keyword};\n    -webkit-font-smoothing: antialiased#{$important-keyword};\n}\n\n\n/// Hide elements only visually but have it available for screen readers.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the\n/// `!important` keyword\n///\n/// @example scss - Usage\n///     .element-1 {\n///         @include hide-visually();\n///     }\n///     .element-2 {\n///         @include hide-visually(true);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         border: 0;\n///         clip: rect(0 0 0 0);\n///         height: 1px;\n///         margin: -1px ;\n///         overflow: hidden;\n///         padding: 0;\n///         position: absolute;\n///         width: 1px;\n///     }\n///     .element-2 {\n///         border: 0 !important;\n///         clip: rect(0 0 0 0) !important;\n///         height: 1px !important;\n///         margin: -1px !important;\n///         overflow: hidden !important;\n///         padding: 0 !important;\n///         position: absolute !important;\n///         width: 1px !important;\n///     }\n\n@mixin hide-visually($apply-important-keyword: false) {\n    $important-keyword: if($apply-important-keyword, ' !important', '');\n    border: 0#{$important-keyword};\n\n    /* stylelint-disable function-whitespace-after */\n\n    clip: rect(0 0 0 0)#{$important-keyword};\n\n    /* stylelint-enable */\n\n    height: 1px#{$important-keyword};\n    margin: -1px #{$important-keyword};\n    overflow: hidden#{$important-keyword};\n    padding: 0#{$important-keyword};\n    position: absolute#{$important-keyword};\n    width: 1px#{$important-keyword};\n}\n\n\n/// Makes an element be aligned horizontally and vertically using Flexbox,\n/// must go on the parent of the element that needs the alignment.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the\n/// `!important` keyword\n///\n/// @example scss - Usage\n///     .element-1 {\n///         @include align-horizontally-and-vertically();\n///     }\n///     .element-2 {\n///         @include align-horizontally-and-vertically(true);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         align-items: center;\n///         display: flex;\n///         flex-flow: column;\n///         justify-content: center;\n///     }\n///     .element-2 {\n///         align-items: center !important;\n///         display: flex !important;\n///         flex-flow: column;\n///         justify-content: center !important;\n///     }\n\n@mixin align-horizontally-and-vertically($apply-important-keyword: false) {\n    $important-keyword: if($apply-important-keyword, ' !important', '');\n    align-items: center#{$important-keyword};\n    display: flex#{$important-keyword};\n    flex-flow: column;\n    justify-content: center#{$important-keyword};\n}\n\n\n/// Makes an element be aligned horizontally and vertically using `position`\n/// and `transform`, must go on the element that needs the alignment and the\n/// elements parent must have `position: relative;`.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the\n/// `!important` keyword\n///\n/// @example scss - Usage\n///     .element-1 {\n///         @include align-horizontally-and-vertically-alt();\n///     }\n///     .element-2 {\n///         @include align-horizontally-and-vertically-alt(true);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         left: 50%;\n///         position: absolute;\n///         top: 50%;\n///         transform: translate(-50%, -50%);\n///     }\n///     .element-2 {\n///         left: 50% !important;\n///         position: absolute !important;\n///         top: 50% !important;\n///         transform: translate(-50%, -50%) !important;\n///     }\n\n@mixin align-horizontally-and-vertically-alt($apply-important-keyword: false) {\n    $important-keyword: if($apply-important-keyword, ' !important', '');\n    left: 50%#{$important-keyword};\n    position: absolute#{$important-keyword};\n    top: 50%#{$important-keyword};\n\n    /* stylelint-disable function-whitespace-after */\n\n    transform: translate(-50%, -50%)#{$important-keyword};\n\n    /* stylelint-enable */\n}\n\n\n/// A container that retains the aspect ratio of its content when that content\n/// needs to adapt to the width of varying viewports.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the\n/// `!important` keyword\n/// @param {List} $ratio [16 9] - The ratio of the content e.g. `3 1`, `4 3`.\n///\n/// @exception `$ratio` must be a list with two values\n///\n/// @example scss - Usage\n///     .element-1 {\n///         @include intrinsic-ratio-container(false, 3 1);\n///     }\n///     .element-2 {\n///         @include intrinsic-ratio-container(true);\n///     }\n/// @example css - CSS Output\n///     .element-1 {\n///         display: block;\n///         height: 0;\n///         overflow: hidden;\n///         padding-bottom: 33.333%;\n///         position: relative;\n///     }\n///     .element-2 {\n///         display: block !important;\n///         height: 0 !important;\n///         overflow: hidden !important;\n///         padding-bottom: 56.25% !important;\n///         position: relative !important;\n///     }\n\n@mixin intrinsic-ratio-container(\n    $apply-important-keyword: false, $ratio: 16 9) {\n    $important-keyword: if($apply-important-keyword, ' !important', '');\n    @if length($ratio) < 2 or length($ratio) > 2 {\n        @error '#{inspect($ratio)} must be a list with two values.';\n    }\n    display: block#{$important-keyword};\n    height: 0#{$important-keyword};\n    overflow: hidden#{$important-keyword};\n\n    /* stylelint-disable max-line-length, function-whitespace-after */\n\n    padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1))#{$important-keyword};\n\n    /* stylelint-enable */\n\n    position: relative#{$important-keyword};\n}\n\n\n/// The content container for the \"Intrinsic ratio container\" mixin.\n///\n/// @author Chris Pearce\n///\n/// @access public\n///\n/// @param {boolean} $apply-important-keyword [false] — Whether to apply the\n/// `!important` keyword\n///\n/// @example scss - Usage\n///    .element-1 {\n///         @include intrinsic-ratio-content();\n///     }\n///     .element-2 {\n///         @include intrinsic-ratio-content(true);\n///     }\n/// @example css - CSS Output\n///    .element-1 {\n///         height: 100%;\n///         left: 0;\n///         position: absolute;\n///         top: 0;\n///         width: 100%;\n///     }\n///     .element-2 {\n///         height: 100% !important;\n///         left: 0 !important;\n///         position: absolute !important;\n///         top: 0 !important;\n///         width: 100% !important;\n///     }\n\n@mixin intrinsic-ratio-content($apply-important-keyword: false) {\n    $important-keyword: if($apply-important-keyword, ' !important', '');\n\n    height: 100%#{$important-keyword};\n    left: 0#{$important-keyword};\n    position: absolute#{$important-keyword};\n    top: 0#{$important-keyword};\n    width: 100%#{$important-keyword};\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/~/shell-csslib/src/_mixins-functions.scss\n **/","/* ============================================================================\n   CONTAINER\n   ========================================================================= */\n\n\n/**\n * Pretty much every UI will need to be constrained by a container or a\n * series of them (modifiers of the base container), e.g. a wider container,\n * a narrower container, etc. Repeating the CSS of these crucial structural\n * UI elements does not make for a robust, scalable, consistent, and\n * maintainable UI. So we abstract that CSS out here.\n *\n * Container(s) can be used anywhere it makes sense to do so including within\n * components. They are 100% wide until their `max-width` kicks in, they have\n * default left and right gutters that equal the base number multiplied\n * by 3, and are center aligned by default.\n *\n * Other styles cannot be applied to an element using a container. Container is\n * a \"Layout Module\" therefore the Single Responsibility Principle and the\n * Open/Close Principle strictly applies. So this would be invalid:\n *\n    <div class=\"l-container  c-card\">\n        […]\n    </div>\n *\n * Here we have wrongly applied a \"Component\" (`c-card`) to the same element as\n * a \"Layout Module\", we've mixed concerns, this can result in this part of\n * the UI being prone to breakages. The valid way to approach this would be:\n *\n    <div class=\"l-container\">\n        <div class=\"c-card\">\n            […]\n        </div>\n    </div>\n *\n * ----------------------------------------------------------------------------\n *\n * Container is namespaced with \"l\" followed by one hyphen, like this:\n *\n   l-container\n *\n * The \"l\" stands for \"layout\" as Container is a \"Layout Module\".\n *\n * ----------------------------------------------------------------------------\n *\n * @markup\n    <div class=\"l-container [modifier(s)]\">\n        […]\n    </div>\n */\n\n\n/**\n * 1. Allows for the `<span>` element to be used.\n */\n\n.l-container {\n    display: block; // [1]\n    max-width: rem($shell-container-maximum-width);\n    min-width: rem($shell-container-minimum-width);\n    padding-left: rem($shell-container-gutter);\n    padding-right: rem($shell-container-gutter);\n    width: 100%;\n\n    @if $shell-container-apply-center-alignment {\n        margin: 0 auto;\n    }\n}\n\n\n/**\n * Modifiers: narrower and wider containers.\n */\n\n.l-container--small {\n    max-width: rem($shell-container-maximum-width-small);\n}\n\n.l-container--x-small {\n    max-width: rem($shell-container-maximum-width-x-small);\n}\n\n.l-container--large {\n    max-width: rem($shell-container-maximum-width-large);\n}\n\n.l-container--x-large {\n    max-width: rem($shell-container-maximum-width-x-large);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/~/shell-csslib/src/_container.scss\n **/","/* ============================================================================\n   GRID\n   ========================================================================= */\n\n/**\n * A powerful Flexbox-based grid that is responsive ready, nestable, and comes\n * with a bunch of handy modifiers. This makes the grid the workhorse of your\n * UI builds, any layout you need always look to the grid first—including\n * within your \"Components\", it exists so you don't have to write redundant\n * CSS to construct layouts.\n *\n * Every grid column width can be generated at any breakpoint thanks to the\n * mixin found here: \"Mixins and Functions -> Apply at breakpoints\". So if you\n * wanted 2 columns at smaller viewports then go to 4 columns at larger\n * viewports you can easily do this just by passing in the breakpoints you need\n * into the relevant settings, like so:\n *\n   // 2 cols\n   $shell-grid-apply-2-col-width-at-breakpoints: true;\n   $shell-grid-define-2-col-width-breakpoints: (1199 max);\n\n   // 4 cols\n   $shell-grid-apply-4-col-width-at-breakpoints: true;\n   $shell-grid-define-4-col-width-breakpoints: (desk);\n *\n * This will to compile to:\n *\n    @media (max-width: 74.9375em) {\n        .l-grid__item--2-col-up-to-desk {\n            width: 16.6666%;\n        }\n    }\n\n    @media (min-width: 75em) {\n        .l-grid__item--4-col-from-desk {\n            width: 33.3333%%;\n        }\n    }\n *\n * Other styles cannot be applied to a grid item. Grid is a \"Layout Module\"\n * therefore the Single Responsibility Principle and the Open/Close Principle\n * strictly applies. So this would be invalid:\n *\n    <div class=\"l-grid__item  c-card\">\n        […]\n    </div>\n *\n * Here we have wrongly applied a \"Component\" (`c-card`) to the same element as\n * a \"Layout Module\", we've mixed concerns, this can result in this part of\n * the UI being prone to breakages. The valid way to approach this would be:\n *\n    <div class=\"l-grid__item\">\n        <div class=\"c-card\">\n            […]\n        </div>\n    </div>\n *\n * As nicely put by Harry Roberts:\n *\n * \"Grid systems grid should be thought of as shelves. They contain content but\n * are not content in themselves. You put up your shelves then fill them with\n * your stuff. By setting up our grids separately to our components you can\n * move components around a lot more easily than if they had dimensions\n * applied to them; this makes our front-ends a lot more adaptable and quick\n * to work with.\"\n *\n * N.B. they're are a number of Flexbox bugs captured here:\n * https://github.com/philipwalton/flexbugs, these have been accounted for in\n * the Shell grid however if anything is missed please log an issue:\n * https://github.com/campaignmonitor/shell/issues.\n *\n * ----------------------------------------------------------------------------\n *\n * Grid is namespaced with \"l\" followed by one hyphen, like this:\n *\n   l-grid\n *\n * The \"l\" stands for \"layout\" as Grid is a \"Layout Module\".\n *\n * ----------------------------------------------------------------------------\n *\n * @markup\n    <div class=\"l-grid [modifier(s)]\">\n        <div class=\"l-grid__item l-grid__item--2-col\">\n            […]\n        </div>\n        <div class=\"l-grid__item l-grid__item--2-col\">\n            […]\n        </div>\n    </div>\n\n    <div class=\"l-grid [modifier(s)]\">\n        <div class=\"l-grid__item l-grid__item--4-col\">\n            […]\n        </div>\n        <div class=\"l-grid__item l-grid__item--4-col\">\n            […]\n        </div>\n        <div class=\"l-grid__item l-grid__item--4-col\">\n            […]\n        </div>\n        <div class=\"l-grid__item l-grid__item--4-col\">\n            […]\n        </div>\n    </div>\n *\n * @credit\n * https://github.com/suitcss/components-grid\n */\n\n\n/**\n * Grid container.\n *\n * 1. Negative left margin to negate the horizontal gutters.\n */\n\n.l-grid {\n    display: flex;\n    flex-flow: row wrap;\n    margin-left: -(rem($shell-g-spacing)); // [1]\n}\n\n\n/**\n * Grid items.\n *\n * 1. Allows the use of widths.\n * 2. Horizontal gutter.\n */\n\n.l-grid__item {\n    flex-basis: auto; // [1]\n    padding-left: rem($shell-g-spacing); // [2]\n}\n\n\n/**\n * Modifier: all items match height of tallest item in a row.\n */\n\n.l-grid--equal-height > .l-grid__item {\n    display: flex;\n}\n\n\n/**\n * Modifier: fit, all grid items have an equal width.\n *\n * 1. Provide all values to avoid IE 10 bug with the shorthand `flex`\n *    property, see: http://git.io/vllC7.\n *    Use `0%` to avoid bug in IE 10/11 with unitless `flex-basis`, see:\n *    http://git.io/vllWx.\n */\n\n.l-grid--fit .l-grid__item {\n    flex: 1 1 0%;  // [1]\n}\n\n\n/**\n * Modifiers: horizontal gutter sizes.\n */\n\n// Base\n// N.B. having to reinstate the default so that any nested grids that inherit\n// a \"Gutterless\" modifier can be easily reapplied\n.l-grid--gutter-horizontal {\n    margin-left: -(rem($shell-g-spacing));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing);\n    }\n}\n\n// Decrease\n.l-grid--gutter-horizontal-small {\n    margin-left: -(rem($shell-g-spacing-small));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-small);\n    }\n}\n\n.l-grid--gutter-horizontal-x-small {\n    margin-left: -(rem($shell-g-spacing-x-small));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-x-small);\n    }\n}\n\n.l-grid--gutter-horizontal-2x-small {\n    margin-left: -(rem($shell-g-spacing-2x-small));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-2x-small);\n    }\n}\n\n// Increase\n.l-grid--gutter-horizontal-large {\n    margin-left: -(rem($shell-g-spacing-large));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-large);\n    }\n}\n\n.l-grid--gutter-horizontal-x-large {\n    margin-left: -(rem($shell-g-spacing-x-large));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-x-large);\n    }\n}\n\n.l-grid--gutter-horizontal-2x-large {\n    margin-left: -(rem($shell-g-spacing-2x-large));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-2x-large);\n    }\n}\n\n.l-grid--gutter-horizontal-3x-large {\n    margin-left: -(rem($shell-g-spacing-3x-large));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-3x-large);\n    }\n}\n\n.l-grid--gutter-horizontal-4x-large {\n    margin-left: -(rem($shell-g-spacing-4x-large));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-4x-large);\n    }\n}\n\n.l-grid--gutter-horizontal-5x-large {\n    margin-left: -(rem($shell-g-spacing-5x-large));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-5x-large);\n    }\n}\n\n.l-grid--gutter-horizontal-6x-large {\n    margin-left: -(rem($shell-g-spacing-6x-large));\n\n    > .l-grid__item {\n        padding-left: rem($shell-g-spacing-6x-large);\n    }\n}\n\n\n/**\n * Modifiers: vertical gutters.\n */\n\n// Base\n.l-grid--gutter-vertical > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing);\n}\n\n// Decrease\n.l-grid--gutter-vertical-small > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-small);\n}\n\n.l-grid--gutter-vertical-x-small > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-x-small);\n}\n\n.l-grid--gutter-vertical-2x-small > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-2x-small);\n}\n\n// Increase\n.l-grid--gutter-vertical-large > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-large);\n}\n\n.l-grid--gutter-vertical-x-large > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-x-large);\n}\n\n.l-grid--gutter-vertical-2x-large > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-2x-large);\n}\n\n.l-grid--gutter-vertical-3x-large > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-3x-large);\n}\n\n.l-grid--gutter-vertical-4x-large > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-4x-large);\n}\n\n.l-grid--gutter-vertical-5x-large > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-5x-large);\n}\n\n.l-grid--gutter-vertical-6x-large > .l-grid__item {\n    margin-bottom: rem($shell-g-spacing-6x-large);\n}\n\n\n/**\n * Modifier: gutterless for both horizontal and vertical gutters.\n *\n * N.B. we boost the specificity by chaining the base class to the modifier\n * class to make sure we're always overriding any gutter modifier classes.\n */\n\n.l-grid.l-grid--gutterless {\n    margin-left: 0;\n\n    > .l-grid__item {\n        margin-bottom: 0;\n        padding-left: 0;\n    }\n}\n\n\n/**\n * Modifiers: alignments.\n */\n\n// Middle\n.l-grid--align-middle {\n    align-items: center;\n}\n\n// Bottom\n.l-grid--align-bottom {\n    align-items: flex-end;\n}\n\n// Center\n.l-grid--align-center {\n    justify-content: center;\n}\n\n// Right\n.l-grid--align-right {\n    justify-content: flex-end;\n}\n\n\n/**\n * Modifiers: \"space between\" and \"space around\".\n */\n\n// Space between\n.l-grid--space-between {\n    justify-content: space-between;\n}\n\n// Space around\n.l-grid--space-around {\n    justify-content: space-around;\n}\n\n\n/**\n * Modifier: horizontally center an individual grid item.\n */\n\n.l-grid__item--align-center {\n    margin: 0 auto;\n}\n\n\n/**\n * Modifiers: grid column widths.\n */\n\n// 1 col\n.l-grid__item--1-col {\n    width: $shell-grid-1-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-1-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--1-col', $shell-grid-define-1-col-width-breakpoints) {\n        width: $shell-grid-1-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 2 col\n.l-grid__item--2-col {\n    width: $shell-grid-2-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-2-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--2-col', $shell-grid-define-2-col-width-breakpoints) {\n        width: $shell-grid-2-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 3 col\n.l-grid__item--3-col {\n    width: $shell-grid-3-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-3-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--3-col', $shell-grid-define-3-col-width-breakpoints) {\n        width: $shell-grid-3-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 4 col\n.l-grid__item--4-col {\n    width: $shell-grid-4-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-4-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--4-col', $shell-grid-define-4-col-width-breakpoints) {\n        width: $shell-grid-4-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 5 col\n.l-grid__item--5-col {\n    width: $shell-grid-5-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-5-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--5-col', $shell-grid-define-5-col-width-breakpoints) {\n        width: $shell-grid-5-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 6 col\n.l-grid__item--6-col {\n    width: $shell-grid-6-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-6-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--6-col', $shell-grid-define-6-col-width-breakpoints) {\n        width: $shell-grid-6-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 7 col\n.l-grid__item--7-col {\n    width: $shell-grid-7-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-7-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--7-col', $shell-grid-define-7-col-width-breakpoints) {\n        width: $shell-grid-7-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 8 col\n.l-grid__item--8-col {\n    width: $shell-grid-8-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-8-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--8-col', $shell-grid-define-8-col-width-breakpoints) {\n        width: $shell-grid-8-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 9 col\n.l-grid__item--9-col {\n    width: $shell-grid-9-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-9-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--9-col', $shell-grid-define-9-col-width-breakpoints) {\n        width: $shell-grid-9-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 10 col\n.l-grid__item--10-col {\n    width: $shell-grid-10-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-10-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--10-col', $shell-grid-define-10-col-width-breakpoints) {\n        width: $shell-grid-10-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 11 col\n.l-grid__item--11-col {\n    width: $shell-grid-11-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-11-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--11-col', $shell-grid-define-11-col-width-breakpoints) {\n        width: $shell-grid-11-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n// 12 col\n.l-grid__item--12-col {\n    width: $shell-grid-12-col-width;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-grid-apply-12-col-width-at-breakpoints {\n    @include apply-at-breakpoints('.l-grid__item--12-col', $shell-grid-define-12-col-width-breakpoints) {\n        width: $shell-grid-12-col-width;\n    }\n}\n\n/* stylelint-enable */\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/~/shell-csslib/src/_grid.scss\n **/","/* ============================================================================\n   HELPERS\n   ========================================================================= */\n\n\n/**\n * The purpose of Helpers is to provide extremely common style treatments\n * and UI patterns, some good examples are:\n *\n * - Hide an element visually but have it available for screen readers.\n * - Truncate a line of text using an ellipsis.\n * - Applying white space outside of Components.\n *\n * Rather than repeating the CSS for these common style treatments and UI\n * patterns over and over and also the cognitive load of having to remember\n * their CSS declarations we instead abstract them into nicely reusable\n * classes and mixins.\n *\n * Helpers all follow the Single Responsibility Principle and the Open/Closed\n * Principle meaning they do one thing and one thing only and are never open to\n * extension i.e. you cannot modify or add to them in any way. If you need to\n * modify any of Shell's Helpers then you should simply not use them. Read more\n * about these principles and how they apply to CSS here:\n *\n * - http://csswizardry.com/2012/04/\n *   the-single-responsibility-principle-applied-to-css/\n * - http://csswizardry.com/2012/06/the-open-closed-principle-applied-to-css/\n *\n * Implementation\n *\n * Helpers are available as classes and sometimes as mixins, here we explain\n * how to implement the two different types. The class versions come with the\n * `!important` keyword, this is because they always need to win in terms of\n * CSS specificity as they should always just work. For the mixin versions\n * this is optional as the mixin versions are typically being applied from\n * within Components therefore do not require the specificity boost. All the\n * mixin versions are defined in \"Mixins and Functions -> Helpers\".\n *\n * Applying Helpers via their *class* implementation would only be done in two\n * scenarios:\n *\n * - **Outside of Components and Layout Templates:** this'll be rare as most\n *   of your UI should be componentised or encapsulated in a Layout Template,\n *   for example, a site header or footer. An example though, might be that\n *   you have a paragraph element (`<p>`) sitting between two Components in a\n *   view that needs to be center aligned, so you apply one of the \"Text\"\n *   Helper classes: `.h-text-align-center`, like so:\n *   `<p class=\"h-text-align-center\">`. However, this could be argued that\n *   this paragraph element should become a Component. The main exception of\n *   avoiding Helpers outside of Components and Layout Templates is the\n *   \"Spacing\" Helpers as we don't want to bake in outside (`margin`) spacing\n *   to Components as this makes them contextual to surrounding UI.\n *\n * - **Inside of Components and Layout Templates:** although quite rare there\n *   are certain scenarios were you would want to be applying a Helper\n *   directly in the markup of a Component or Layout Template as opposed to\n *   applying it via the mixin implementation. However, this typically only\n *   ever applies to multi-line declaration Helpers, applying a single-line\n *   declaration Helper, for example:\n *\n    .h-text-size {\n        font-size: rem($shell-g-font-size) !important;\n    }\n *\n *   Wouldn't be correct as you would simply write that single-line declaration\n *   directly into your Component or Layout Template CSS, and this is why\n *   single-line declaration Helpers do not come with a mixin version. An\n *   example of applying a multi-line declaration Helper directly in the\n *   markup of a Component or Layout Template would be when you're having to\n *   create a class to apply a fairly common Helper. For example, you're\n *   inside a \"Drop Down Menu\" Component needing to add a piece of text to the\n *   drop down menu trigger button that is only for screen reader users—using\n *   the \"Hide visually\" Helper. The correct way to achieve this would be:\n *\n    <button type=\"button\" class=\"c-drop-down-menu__trigger\">\n        My account\n        <span class=\"h-hide-visually\">Open the menu with the enter key and\n        close it with the escape key; use the up and down arrow keys to\n        navigate.</span>\n    </button>\n *\n *   Not:\n *\n    <button type=\"button\" class=\"c-drop-down-menu__trigger\">\n        My account\n        <span class=\"c-drop-down-menu__trigger-assistive-text\">Open the menu\n        with the enter key and close it with the escape key; use the up and\n        down arrow keys to navigate.</span>\n    </button>\n    .c-drop-down-menu__trigger-assistive-text {\n        @include h-hide-visually;\n    }\n *\n *   Knowing when to do this isn't always clear and it is very case dependant.\n *\n * Applying Helpers via their *mixin* implementation would only be done in one\n * scenario:\n *\n * - **Inside of Components and Layout Templates:** any multi-line declaration\n *   Helpers should be applied via their mixin, this is to keep all the styles\n *   related to a Component or Layout Template nicely contained. For example,\n *   you may need to truncate a line of text in a site header Layout Template\n *   that is part of a main nav link item—using the \"Text truncate\" Helper.\n *   The correct way to achieve this would be:\n *\n    <a href=\"some/url\" class=\"l-header__nav-item\">List &amp; Subscribers</a>\n *\n    .l-header__nav-item {\n        […]\n        @include h-text-truncate;\n    }\n *\n *   Not:\n *\n    <a href=\"some/url\" class=\"l-header__nav-item  h-text-truncate\">List &amp;\n    Subscribers</a>\n *\n * ----------------------------------------------------------------------------\n *\n * N.B. it is important not to overuse certain Helpers, the exceptions are the\n * \"Spacing\" Helpers and the \"Hide visually\" and \"Text truncate\" Helpers.\n * Overuse can indicate that your UI is not componentised enough, which can\n * lead to a number of problems.\n *\n * ----------------------------------------------------------------------------\n *\n * N.B. some Helpers are available to be applied at any breakpoint the Shell\n * consumer wishes, see \"Mixins and Functions -> Apply at breakpoints\" to\n * understand how this works.\n *\n * ----------------------------------------------------------------------------\n *\n * Helpers are namespaced with \"h\" followed by one hyphen, like this:\n *\n   h-clear-fix\n   h-text-truncate\n *\n * The \"h\" stands for \"helper\".\n *\n * ----------------------------------------------------------------------------\n *\n * CONTENTS:\n *\n * 1. Clear fix\n * 2. Text\n * 3. Hide\n * 4. Spacing\n * 5. Horizontal and vertical alignment\n * 6. Intrinsic ratio\n */\n\n\n\n\n/* 1. Clear fix\n   ========================================================================= */\n\n/**\n * Makes an element expand to contain floated children.\n *\n * N.B. mixin is here: \"Mixins and Functions -> Helpers\".\n */\n\n.h-clear-fix {\n    @include clear-fix(true);\n}\n\n\n\n\n/* 2. Text\n   ========================================================================= */\n\n/**\n * Sizes.\n */\n\n\n/**\n * Base.\n */\n\n.h-text-size {\n    font-size: rem($shell-g-font-size) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size', $shell-helper-define-text-size-breakpoints) {\n        font-size: rem($shell-g-font-size) !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Decrease from base.\n */\n\n// Small\n.h-text-size-small {\n    font-size: rem($shell-g-font-size-small) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-small-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-small', $shell-helper-define-text-size-small-breakpoints) {\n        font-size: rem($shell-g-font-size-small) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// X-small\n.h-text-size-x-small {\n    font-size: rem($shell-g-font-size-x-small) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-x-small-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-x-small', $shell-helper-define-text-size-x-small-breakpoints) {\n        font-size: rem($shell-g-font-size-x-small) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 2X-small\n.h-text-size-2x-small {\n    font-size: rem($shell-g-font-size-2x-small) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-x-small-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-2x-small', $shell-helper-define-text-size-2x-small-breakpoints) {\n        font-size: rem($shell-g-font-size-2x-small) !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Increase from base.\n */\n\n// Large\n.h-text-size-large {\n    font-size: rem($shell-g-font-size-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-large', $shell-helper-define-text-size-large-breakpoints) {\n        font-size: rem($shell-g-font-size-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// X-Large\n.h-text-size-x-large {\n    font-size: rem($shell-g-font-size-x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-x-large', $shell-helper-define-text-size-x-large-breakpoints) {\n        font-size: rem($shell-g-font-size-x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 2X-Large\n.h-text-size-2x-large {\n    font-size: rem($shell-g-font-size-2x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-2x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-2x-large', $shell-helper-define-text-size-2x-large-breakpoints) {\n        font-size: rem($shell-g-font-size-2x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 3X-Large\n.h-text-size-3x-large {\n    font-size: rem($shell-g-font-size-3x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-3x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-3x-large', $shell-helper-define-text-size-3x-large-breakpoints) {\n        font-size: rem($shell-g-font-size-3x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 4X-Large\n.h-text-size-4x-large {\n    font-size: rem($shell-g-font-size-4x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-4x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-4x-large', $shell-helper-define-text-size-4x-large-breakpoints) {\n        font-size: rem($shell-g-font-size-4x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 5X-Large\n.h-text-size-5x-large {\n    font-size: rem($shell-g-font-size-5x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-5x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-5x-large', $shell-helper-define-text-size-5x-large-breakpoints) {\n        font-size: rem($shell-g-font-size-5x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 6X-Large\n.h-text-size-6x-large {\n    font-size: rem($shell-g-font-size-6x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-6x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-6x-large', $shell-helper-define-text-size-6x-large-breakpoints) {\n        font-size: rem($shell-g-font-size-6x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 7X-Large\n.h-text-size-7x-large {\n    font-size: rem($shell-g-font-size-7x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-size-7x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-size-7x-large', $shell-helper-define-text-size-7x-large-breakpoints) {\n        font-size: rem($shell-g-font-size-7x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Alignments.\n */\n\n// Center\n.h-text-align-center {\n    text-align: center !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-align-center-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-align-center', $shell-helper-define-text-align-center-breakpoints) {\n        text-align: center !important;\n    }\n}\n\n/* stylelint-enable */\n\n// Left\n.h-text-align-left {\n    text-align: left !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-align-left-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-align-left', $shell-helper-define-text-align-left-breakpoints) {\n        text-align: left !important;\n    }\n}\n\n/* stylelint-enable */\n// Right\n.h-text-align-right {\n    text-align: right !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-align-right-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-align-right', $shell-helper-define-text-align-right-breakpoints) {\n        text-align: right !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Truncate some text using an ellipsis. This Helper will only work on block\n * container elements so the default is set to `display: block;`, to override\n * this to be, say, `display: inline-block;` you have two options:\n *\n * 1. Use the \"Inline\" modifier class selector: `.h-text-truncate--inline`.\n * 2. Use the mixin assigning \"inline-block\" to the `$display` parameter:\n *    `@include h-text-truncate(inline-block);`.\n *\n * You can assign other `display` values when using the mixin but not sure if\n * that'll ever be required outside of `display: block;` and\n * `display: inline-block;`?\n *\n * N.B. mixin is here: \"Mixins and Functions -> Helpers\".\n */\n\n.h-text-truncate {\n    @include text-truncate(true);\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-truncate-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-truncate', $shell-helper-define-text-truncate-breakpoints) {\n        @include text-truncate(true);\n    }\n}\n\n/* stylelint-enable */\n\n/**\n * Modifier: inline.\n */\n\n.h-text-truncate--inline {\n    display: inline-block !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-text-truncate-at-breakpoints {\n    @include apply-at-breakpoints('.h-text-truncate--inline', $shell-helper-define-text-truncate-breakpoints) {\n        display: inline-block !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n\n\n/* 3. Hide\n   ========================================================================= */\n\n/**\n * Hide elements from both screen readers and the document flow.\n */\n\n.h-hide {\n    display: none !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-hide-at-breakpoints {\n    @include apply-at-breakpoints('.h-hide', $shell-helper-define-hide-breakpoints) {\n        display: none !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Hide elements only visually but have it available for screen readers.\n *\n * N.B. mixin is here: \"Mixins and Functions -> Helpers\".\n */\n\n.h-hide-visually {\n    @include hide-visually(true);\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-hide-visually-at-breakpoints {\n    @include apply-at-breakpoints('.h-hide-visually', $shell-helper-define-hide-visually-breakpoints) {\n        @include hide-visually(true);\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Hide elements for JavaScript users and non-JavaScript users, this is\n * necessary when building accessible and progressively enhanced UI's.\n *\n * These classes are applied to the `<html>` element depending whether\n * JavaScript is on or off:\n *\n * - `no-js` = JavaScript is off\n * - `js`    = JavaScript is on\n *\n * The `no-js` class is to be hard-coded to the `<html>` element in your master\n * layout to be replaced with the `js` class using JavaScript.\n *\n * N.B. these single-line declaration Helpers would typically always be applied\n * directly in the markup of your Components and Layout Templates.\n */\n\n// JavaScript is off\n.no-js .h-hide-if-js-off {\n    display: none !important;\n}\n\n// JavaScript is on\n.js .h-hide-if-js-on {\n    display: none !important;\n}\n\n\n/**\n * Hide and show elements for print media.\n */\n\n.h-show-for-print,\n.h-show-for-print-inline,\n.h-show-for-print-inline-block {\n    display: none !important;\n}\n\n@media print {\n    .h-hide-for-print {\n        display: none !important;\n    }\n\n    .h-show-for-print {\n        display: block !important;\n    }\n\n    .h-show-for-print-inline {\n        display: inline !important;\n    }\n\n    .h-show-for-print-inline-block {\n        display: inline-block !important;\n    }\n}\n\n\n\n\n/* 4. Spacing\n   ========================================================================= */\n\n/**\n * Sometimes spacing outside of a Component is handled by one of these\n * \"Spacing\" Helpers, and ALL spacing is downward facing hence only\n * `margin-bottom` being used.\n */\n\n\n/**\n * Base.\n */\n\n.h-spacing {\n    margin-bottom: rem($shell-g-spacing) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing', $shell-helper-define-spacing-breakpoints) {\n        margin-bottom: rem($shell-g-spacing) !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Decrease from base.\n */\n\n// Small\n.h-spacing-small {\n    margin-bottom: rem($shell-g-spacing-small) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-small-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-small', $shell-helper-define-spacing-small-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-small) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// X-Small\n.h-spacing-x-small {\n    margin-bottom: rem($shell-g-spacing-x-small) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-x-small-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-x-small', $shell-helper-define-spacing-x-small-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-x-small) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 2X-Small\n.h-spacing-2x-small {\n    margin-bottom: rem($shell-g-spacing-2x-small) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-2x-small-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-2x-small', $shell-helper-define-spacing-2x-small-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-2x-small) !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Increase from base.\n */\n\n// Large\n.h-spacing-large {\n    margin-bottom: rem($shell-g-spacing-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-large', $shell-helper-define-spacing-large-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// X-Large\n.h-spacing-x-large {\n    margin-bottom: rem($shell-g-spacing-x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-x-large', $shell-helper-define-spacing-x-large-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 2X-Large\n.h-spacing-2x-large {\n    margin-bottom: rem($shell-g-spacing-2x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-2x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-2x-large', $shell-helper-define-spacing-2x-large-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-2x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 3X-Large\n.h-spacing-3x-large {\n    margin-bottom: rem($shell-g-spacing-3x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-3x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-3x-large', $shell-helper-define-spacing-3x-large-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-3x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 4X-Large\n.h-spacing-4x-large {\n    margin-bottom: rem($shell-g-spacing-4x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-4x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-4x-large', $shell-helper-define-spacing-4x-large-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-4x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 5X-Large\n.h-spacing-5x-large {\n    margin-bottom: rem($shell-g-spacing-5x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-5x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-5x-large', $shell-helper-define-spacing-5x-large-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-5x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n// 6X-Large\n.h-spacing-6x-large {\n    margin-bottom: rem($shell-g-spacing-6x-large) !important;\n}\n\n// Apply at breakpoints\n/* stylelint-disable max-line-length */\n\n@if $shell-helper-apply-spacing-6x-large-at-breakpoints {\n    @include apply-at-breakpoints('.h-spacing-6x-large', $shell-helper-define-spacing-6x-large-breakpoints) {\n        margin-bottom: rem($shell-g-spacing-6x-large) !important;\n    }\n}\n\n/* stylelint-enable */\n\n\n/**\n * Remove spacing.\n */\n\n.h-spacing-none {\n    margin-bottom: 0 !important;\n}\n\n\n\n\n/* 5. Horizontal and vertical alignment\n   ========================================================================= */\n\n/**\n * Flexbox version, must go on the parent of the element that needs the\n * alignment.\n *\n * N.B. mixin is here: \"Mixins and Functions -> Helpers\".\n */\n\n.h-align-horizontally-and-vertically {\n    @include align-horizontally-and-vertically(true);\n}\n\n\n/**\n * Position and transform version, must go on the element that needs the\n * alignment and the elements parent must have `position: relative;`.\n *\n * N.B. mixin is here: \"Mixins and Functions -> Helpers\".\n */\n\n.h-align-horizontally-and-vertically-parent {\n    position: relative !important;\n}\n\n.h-align-horizontally-and-vertically-alt {\n    @include align-horizontally-and-vertically-alt(true);\n}\n\n\n\n\n/* 6. Intrinsic ratio\n   ========================================================================= */\n\n/**\n * A container that retains the aspect ratio of its content when that content\n * needs to adapt to the width of varying viewports. The content would\n * typically be embedded elements, like:\n *\n * `<video>`\n * `<iframe>`\n *\n * N.B. mixin is here: \"Mixins and Functions -> Helpers\".\n *\n * @credit\n * https://github.com/suitcss/components-flex-embed/blob/master/lib/\n * flex-embed.css\n */\n\n\n/**\n * The container, the default ratio is \"16:9\".\n */\n\n.h-intrinsic-ratio {\n    @include intrinsic-ratio-container(true);\n}\n\n/**\n * Modifiers: different ratios, we can't use the mixin for this as it'll\n * generate too much CSS as we'll be generating every property for each\n * modifier when we only need to set the `padding-bottom` property—so we just\n * override the default ratio of \"16:9\".\n */\n\n// 3:1 aspect ratio\n.h-intrinsic-ratio--3-by-1 {\n    padding-bottom: (100 / 3) * 1% !important;\n}\n\n// 2:1 aspect ratio\n.h-intrinsic-ratio--2-by-1 {\n    padding-bottom: 50% !important;\n}\n\n// 4:3 aspect ratio\n.h-intrinsic-ratio--4-by-3 {\n    padding-bottom: 75% !important;\n}\n\n// 1:1 aspect ratio\n.h-intrinsic-ratio--1-by-1 {\n    padding-bottom: 100% !important;\n}\n\n\n/**\n * The content.\n */\n\n.h-intrinsic-ratio__content {\n    @include intrinsic-ratio-content(true);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/~/shell-csslib/src/_helpers.scss\n **/","/**\n * Primary.\n *\n * 1. Set to same as other form elements to allow padding to dictate height.\n * 2. Remove `outline` as we provide a strong custom `:focus`.\n * 3. Need to declare the color for the hover and focus states in order to\n *    override the base link styles.\n */\n\n.c-button {\n    align-items: center;\n    background-color: $g-color-legacy-green-700;\n    background-image: linear-gradient(\n        $g-color-legacy-green-500,\n        transparent\n    );\n    border: 1px solid $g-color-legacy-green-700;\n    border-radius: $shell-g-border-radius;\n    box-shadow: inset 0 1px 0 0 $g-color-legacy-green-400;\n    display: inline-flex;\n    font-weight: $shell-g-font-weight-bold;\n    line-height: 1; // [1]\n    outline: 0; // [2]\n    padding: rem($shell-g-spacing-small) rem($shell-g-spacing-x-large);\n    text-decoration: none;\n    text-shadow: 0 1px 1px $g-color-legacy-green-800;\n    transition: background-color 0.12s ease;\n\n    &,\n    &:hover, // [3]\n    &:focus { // [3]\n        color: $shell-g-color-white;\n    }\n\n    &:hover,\n    &:focus {\n        background-color: $g-color-legacy-green-400;\n    }\n\n    // [1]\n    &:focus {\n        box-shadow: $g-box-shadow-active;\n    }\n\n    &:active {\n        box-shadow: inset 0 1px 0 rgba($shell-g-color-black, 0.08),\n                    inset -2px 0 0 rgba($shell-g-color-black, 0.03);\n        text-shadow: 0 -1px 1px $g-color-legacy-green-800;\n        transform: translateY(1px);\n    }\n}\n\n\n/**\n * Secondary.\n */\n\n.c-button--secondary {\n    background-color: $g-color-grey-50;\n    background-image: linear-gradient(\n        $g-color-grey-50,\n        $g-color-grey-100\n    );\n    border-color: $g-color-grey-300;\n    box-shadow: inset 0 2px 0 0 $shell-g-color-white;\n    text-shadow: none;\n\n    // Need this to override \"primary\"\n    &,\n    &:hover,\n    &:focus {\n        color: $g-color-grey-700;\n    }\n\n    &:active {\n        text-shadow: none;\n    }\n}\n\n\n/**\n * State: disabled.\n *\n * 1. Override default Shell opacity.\n */\n\n.c-button:disabled {\n    background-color: $g-color-grey-100;\n    background-image: none;\n    border-color: currentColor;\n    box-shadow: 0 1px 0 0 $shell-g-color-white,\n                inset 0 3px 0 0 rgba($g-color-grey-300, 0.3);\n    color: $g-color-grey-300;\n    opacity: 1; // [1]\n    text-shadow: 0 1px 0 $shell-g-color-white;\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/button/_button.scss\n **/","/**\n * Base.\n *\n * 1. Required for `button` implementations.\n */\n\n.c-card {\n    background-color: $shell-g-color-white;\n    border-top: 1px solid $g-color-grey-300;\n    display: flex;\n    padding: rem($shell-g-spacing-small);\n    text-decoration: none;\n    width: 100%; // [1]\n}\n\n.c-card:last-child {\n    border-bottom: 1px solid $g-color-grey-300;\n}\n.c-card__content {\n    margin-left: rem($shell-g-spacing);\n}\n\n.c-card__image {\n    border-radius: 50%;\n    height: rem(50);\n    width: rem(50);\n    overflow: hidden;\n}\n\n.c-card__description {\n    color: $g-color-grey-600;\n    font-size: rem($shell-g-font-size-2x-small);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/card/_card.scss\n **/","/**\n * Base.\n */\n\n.l-container--gutter-small {\n    padding: rem($shell-g-spacing-small);\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/container/_container.scss\n **/","/**\n * Base.\n */\n\n.c-footer {\n    background-color: #242424;\n    bottom: 0;\n    left: 0;\n    position: fixed;\n    width: 100%;\n}\n\n.c-footer a {\n    color: $shell-g-color-white;\n    display: block;\n    padding: rem($shell-g-spacing);\n    text-decoration: none;\n}\n\n.c-footer .is-active {\n    background-color: #141414;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/footer/_footer.scss\n **/","/**\n * Base.\n */\n\n.c-form-item:not(:last-child) {\n    margin-bottom: rem($shell-g-spacing-large);\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/formItem/_formItem.scss\n **/","/**\n * Base.\n */\n\n.c-header {\n    background-color: $g-color-grey-900;\n    color: $shell-g-color-white;\n    padding: rem($shell-g-spacing);\n}\n\n.c-header__title {\n    color: $shell-g-color-white;\n}\n\n\n.c-sub-header {\n    background-color: $shell-g-color-white;\n    padding: rem($shell-g-spacing);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/header/_header.scss\n **/","/**\n * Base.\n */\n\n.c-input-label {\n    display: block;\n    font-weight: $shell-g-font-weight-bold;\n    margin-bottom: rem($shell-g-spacing-x-small);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/inputLabel/_inputLabel.scss\n **/","/**\n * Base.\n *\n * 1. Required for `button` implementations.\n */\n\n.c-panel {\n    background-color: $shell-g-color-white;\n    border-radius: $shell-g-border-radius;\n    box-shadow: $g-box-shadow-panel;\n    display: block;\n    width: 100%; // [1]\n}\n\n/**\n * Modifier: dark\n */\n\n.c-panel--dark {\n    background-color: $g-color-grey-50;\n}\n\n.c-panel--hollow {\n    border: 2px dashed grey;\n    box-shadow: none;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/panel/_panel.scss\n **/","$c-popover-arrow-size: 8px;\n\n$c-popover-background-color: $g-color-grey-50;\n\n\n/**\n * Base.\n *\n * 1. Position smack in the middle of whatever it's positioned relative to.\n * 2. Position directly underneath of whatever it's positioned relative to and\n *    offset by the height of the arrow, any further offset should be handled\n *    by the `offset` property, which currently isn't doing anything ಠ╭╮ಠ.\n */\n\n.c-popover {\n    animation: addStepPopoverScaleUp 0.2s ease both;\n    background-color: $c-popover-background-color;\n    border: 1px solid $g-color-grey-300;\n    border-radius: $shell-g-border-radius;\n    box-shadow: 0 0 6px rgba($g-color-grey-900, 0.2);\n    left: 0; // [1]\n    margin-top: rem($c-popover-arrow-size);\n    padding: rem($shell-g-spacing-x-large);\n    position: absolute;\n    top: 100%; // [2]\n    transform: translateX(-50%); // [1]\n    transform-origin: 0 0;\n    white-space: nowrap;\n    z-index: z(popover);\n}\n\n@keyframes addStepPopoverScaleUp {\n    0% {\n        opacity: 0.8;\n        transform: scale(0.8) translateX(-50%);\n    }\n\n    100% {\n        opacity: 1;\n        transform: scale(1) translateX(-50%);\n    }\n}\n\n/**\n * Popover arrows.\n *\n * N.B. might be better to change to SVG's?\n */\n\n.c-popover::before,\n.c-popover::after {\n    border: $c-popover-arrow-size solid transparent;\n    content: '';\n    height: 0;\n    position: absolute;\n    width: 0;\n}\n\n\n/**\n * Modifiers: arrow positions.\n */\n\n// Top\n.c-popover--top::before {\n    border-bottom-color: $c-popover-background-color;\n    bottom: 100%;\n    left: 50%;\n    margin-left: -(rem($c-popover-arrow-size));\n}\n\n// Bottom\n.c-popover--bottom::before {\n    border-top-color: $c-popover-background-color;\n    left: 50%;\n    margin-left: -(rem($c-popover-arrow-size));\n    top: 100%;\n}\n\n// Left\n.c-popover--left::before {\n    border-right-color: $c-popover-background-color;\n    margin-top: -(rem($c-popover-arrow-size));\n    right: 100%;\n    top: 50%;\n}\n\n// Right\n.c-popover--right::before {\n    border-left-color: $c-popover-background-color;\n    left: 100%;\n    margin-top: -(rem($c-popover-arrow-size));\n    top: 50%;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/popover/_popover.scss\n **/","\n.c-meter {\n    background: $g-color-grey-300;\n    border-radius: 2em;\n    height: rem($shell-g-spacing-x-small);\n    overflow: hidden;\n    position: relative;\n}\n\n/**\n * The status bar.\n * Changes based on the percentage of the meter this is animatable, and relies\n * upon transform: scaleX() to provide a performant animation rather than width\n */\n.c-meter__fill {\n    background-color: $g-color-brand;\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    transform-origin: 0 0;\n    transition: background 0.2s ease, transform 0.3s ease;\n}\n\n.c-meter.is-warning .c-meter__fill {\n    background-color: $g-color-red-500;\n}\n\n.c-meter.is-empty .c-meter__fill {\n    background-color: transparent;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/meter/_meter.scss\n **/","/**\n * Label.\n * 1. Apply a gutter between the input and label using `padding` not `margin`\n *    so we don't have any non-interactive gaps ;)\n */\n\n.c-radio-input .c-input-label {\n    display: inline-flex;\n    font-size: rem($shell-g-font-size-small);\n    font-weight: $shell-g-font-weight-normal;\n    margin-bottom: 0;\n    padding-left: rem($shell-g-spacing-x-small); // [1]\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/radioInput/_radioInput.scss\n **/",".c-search-input {\n    position: relative; // [1]\n}\n\n/**\n * Base.\n *\n * 1. Remove `outline` as we provide a strong custom `:focus`.\n * 2. Needed in order to have `transition` work as browsers don't like it when\n *    there isn't the same amount of `box-shadow` values for both default and\n *    the `:focus` state ಠ╭╮ಠ.\n */\n.c-search-input__input {\n    background-color: $shell-g-color-white;\n    border: 0;\n    border-radius: 2em;\n    box-shadow: $g-box-shadow-text-input;\n    color: $shell-g-color-text;\n    font-size: rem($shell-g-font-size-small);\n    outline: 0; // [1]\n    padding: rem($shell-g-spacing-small) rem($shell-g-spacing) rem($shell-g-spacing-small) rem($shell-g-spacing-2x-large);\n    transition: box-shadow 0.2s ease;\n    width: 100%;\n\n    // [1]\n    &:focus {\n        box-shadow: inset 0 0 0 0 rgba($shell-g-color-white, 0),\n                    $g-box-shadow-active; // [2]\n    }\n\n    &.is-invalid,\n    &.is-invalid:focus {\n        box-shadow: 0 0 0 1px $g-color-red-500;\n    }\n}\n\n.c-search-input__icon {\n    fill: $shell-g-color-black;\n    height: rem(24);\n    pointer-events: none;\n    position: absolute;\n    left: rem($shell-g-spacing-small);\n    top: 50%;\n    transform: translateY(-50%);\n    width: rem(24);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/searchInput/_searchInput.scss\n **/","/**\n * Settings.\n */\n\n// Equals the height of text inputs\n$c-select-list-padding-ends: $shell-g-spacing-small;\n\n\n\n/**\n * The container `<span>` element which we apply the visual `<select>` element\n * styles too.\n *\n * 1. So we can position the SVG icon.\n */\n\n.c-select-list {\n    background-color: $g-color-grey-50;\n    border-radius: $shell-g-border-radius;\n    box-shadow: $g-box-shadow-select-list;\n    display: block;\n    position: relative; // [1]\n}\n\n/**\n * The `<select>` element.\n *\n * 1.   Remove the visual user-agent styles.\n * 2.   Reinstate the correct `cursor` as we killed it in [1].\n * 3.   We always want it to be the full width of its parent `<span>` element.\n * 4.   The only visual styles we apply, the rest go on the parent `<span>`\n *      element.\n * 4a.  Needs to be bigger to make room for the SVG icon.\n * 5.   Remove `outline` as we provide a strong custom `:focus`.\n * 6.   Needed in order to have `transition` work as browsers don't like it\n *      when there isn't the same amount of `box-shadow` values for both\n *      default and the `:focus` state ಠ╭╮ಠ.\n * 7.   Hide the arrow in IE 10.\n */\n\n.c-select-list__select {\n    appearance: none; // [1]\n    background: none; // [1]\n    border: 0; // [1]\n    cursor: pointer; // [2]\n    display: block; // [3]\n    font-size: rem($shell-g-font-size-small); // [4]\n    outline: 0; // [5]\n    padding-bottom: rem($c-select-list-padding-ends); // [4]\n    padding-left: rem($shell-g-spacing); // [4]\n    padding-right: rem($shell-g-spacing-2x-large); // [4a]\n    padding-top: rem($c-select-list-padding-ends); // [4]\n    transition: box-shadow 0.2s ease;\n    width: 100%; // [3]\n\n    // [7]\n    &::-ms-expand {\n        display: none;\n    }\n\n    // [5]\n    &:focus {\n        box-shadow: inset 0 0 0 0 rgba($shell-g-color-white, 0),\n                    $g-box-shadow-active; // [6]\n    }\n\n    &.is-invalid,\n    &.is-invalid:focus {\n        box-shadow: 0 0 0 1px $g-color-red-500;\n    }\n}\n\n\n/**\n * The SVG caret icon.\n */\n\n.c-select-list__icon {\n    fill: $shell-g-color-black;\n    height: rem(7);\n    pointer-events: none;\n    position: absolute;\n    right: rem($shell-g-spacing);\n    top: 50%;\n    transform: translateY(-50%);\n    width: rem(16);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/selectList/_selectList.scss\n **/",".c-stat-box {\n    border: 1px solid;\n    margin-left: rem($shell-g-spacing);\n    padding: rem($shell-g-spacing-2x-small);\n    text-align: center;\n    width: rem($shell-g-spacing-4x-large);\n}\n\n.c-stat-box__value {\n    display: block;\n}\n\n.c-stat-box__label {\n    display: block;\n    font-size: rem($shell-g-font-size-2x-small);\n    text-transform: uppercase;\n}\n\n.c-stat {\n    font-weight: 300;\n    text-align: left;\n}\n.c-stat__number {\n    display: block;\n    font-size: rem($shell-g-font-size-2x-large)\n}\n.c-stat__description {\n    color: $g-color-grey-700;\n    display: block;\n    font-size: rem($shell-g-font-size-2x-small);\n    text-transform: uppercase;\n}\n\n.c-stat .c-text-input {\n    border-bottom-right-radius: 0;\n    border-top-right-radius: 0;\n    border: 1px solid rgba($shell-g-color-black, 0.2);\n    border-right: none;\n    width: rem(150);\n}\n\n.c-stat .c-button {\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/statBox/_statBox.scss\n **/",".c-sub-header {\n    background-color: $shell-g-color-white;\n    padding: rem($shell-g-spacing);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/subHeader/_subHeader.scss\n **/","/**\n * Base.\n */\n\n.c-table {\n    border: 0;\n    border-collapse: collapse;\n    width: 100%;\n}\n\n.c-table th {\n    border-bottom: 2px solid currentColor;\n    border-top: 2px solid currentColor;\n    font-weight: 300;\n    text-align: left;\n    text-transform: uppercase;\n}\n\n.c-table th,\n.c-table td {\n    padding: rem($shell-g-spacing-x-small);\n}\n\n.c-table tr:nth-child(odd) td {\n    background-color: $shell-g-color-white;\n}\n\n.h-small-text {\n    font-size: rem($shell-g-font-size-x-small);\n    font-weight: 300;\n}\n\n.h-center-text {\n    text-align: center !important;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/table/_table.scss\n **/","/**\n * Base.\n *\n * 1. Remove `outline` as we provide a strong custom `:focus`.\n * 2. Needed in order to have `transition` work as browsers don't like it when\n *    there isn't the same amount of `box-shadow` values for both default and\n *    the `:focus` state ಠ╭╮ಠ.\n */\n\n.c-text-input {\n    background-color: $shell-g-color-white;\n    border: 0;\n    border-radius: $shell-g-border-radius;\n    box-shadow: $g-box-shadow-text-input;\n    color: $shell-g-color-text;\n    font-size: rem($shell-g-font-size-small);\n    outline: 0; // [1]\n    padding: rem($shell-g-spacing-small) rem($shell-g-spacing);\n    transition: box-shadow 0.2s ease;\n    width: 100%;\n\n    // [1]\n    &:focus {\n        box-shadow: inset 0 0 0 0 rgba($shell-g-color-white, 0),\n                    $g-box-shadow-active; // [2]\n    }\n\n    &.is-invalid,\n    &.is-invalid:focus {\n        box-shadow: 0 0 0 1px $g-color-red-500;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///src/src/components/textInput/_textInput.scss\n **/"],"sourceRoot":""}